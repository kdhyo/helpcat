{"version":3,"sources":["components/basics/AlarmDetail.js","components/basics/AlarmPage.js","components/basics/Aside.js","components/mains/PreviewBoardArticle.js","components/mains/PreviewBoard.js","components/mains/MainPageReview.js","components/basics/Footer.js","constants.js","components/mains/KakaoMap.js","components/mains/MapMain.js","components/mains/IndexMain.js","routes/Main.js","components/board/BoardPageArticle.js","components/board/BoardPage.js","components/board/IndexBoard.js","routes/Board.js","components/logins/LoginPage.js","components/logins/IndexLogin.js","routes/Login.js","components/utils/daumPostcode.js","components/logins/SignupPage.js","components/logins/IndexSignUp.js","routes/SignUp.js","components/board/FileUpload.js","components/board/BoardWrite.js","components/board/IndexWrite.js","routes/Write.js","components/basics/Header.js","components/mains/ValidateEmail.js","components/board/BoardDetail.js","components/board/FileReUpload.js","components/board/BoardUpdate.js","components/Users/UserInforList.js","components/Users/UserBoardArticle.js","components/basics/ErrorUrlPage.js","components/Users/UserAccComplete.js","components/Users/UserAccept.js","components/basics/ErrorNotLogin.js","components/Users/UserEdit.js","components/Users/UserPwdEdit.js","components/Users/UserReqComplete.js","components/Users/UserRequest.js","components/Users/UserWithdrawal.js","components/Users/UserInforContents.js","components/Users/UserInformation.js","components/Users/IndexUsers.js","components/reviews/ReviewWrite.js","components/messages/MessageUserDetail.js","components/messages/MessageUsers.js","components/messages/MessageText.js","components/messages/Message.js","components/messages/MessageMain.js","components/messages/IndexMessage.js","App.js","index.js"],"names":["VIEW_SERVICES_BOARD_QUERY","gql","NEW_SERVICE_SUBSCRIPTION","AlarmDetail","props","_subscribeToNewLinks","subscribeToMore","document","updateQuery","prev","subscriptionData","data","newServiceData","newService","console","log","exists","showServices","find","id","state","Object","assign","address1","address2","ansUser","contents","endAt","Number","price","reqUser","startAt","title","proceeding","query","loading","error","className","src","width","alt","Component","AlarmPage","alarmState","this","setState","onClick","alarmOFF","bind","alarmON","Aside","to","PreviewBoardArticle","serviceBoardData","pathname","nickName","format","PreviewBoard","map","i","progress","key","Proceeding","mapToComponent","href","slideImages","REVIEW_ALL_QUERY","MainPageReview","easing","seeReviews","review","style","backgroundImage","rating_reqUser","rating","Footer","AUTH_TOKEN","KakaoMap","mapGpsOn","tokenData","localStorage","getItem","userData","meData","me","serviceData","authToken","API_KEY","process","REACT_APP_KAKAO_API_KEY","mapScript","createElement","async","head","appendChild","onload","kakao","maps","load","geocoder","services","Geocoder","errandPlace","length","name","place","icon","MarkerImage","Size","offset","Point","shape","coords","addressSearch","result","status","Status","OK","lat","y","lon","x","container","getElementById","options","center","LatLng","level","MarkersOverlay","Map","navigator","geolocation","getCurrentPosition","latitude","longitude","position","Marker","image","setMap","content","CustomOverlay","yAnchor","GPSOFF","GPSON","USER_DATA_QUERY","MapMain","undefined","IndexMain","Main","component","BoardPageArticle","BoardPage","notProceeding","nowProceeding","IndexBoard","Board","LOGIN_MUTATION","LoginPage","email","password","_confirm","a","token","login","_saveUserData","history","push","setItem","mutation","onCompleted","onSubmit","e","preventDefault","variables","value","onChange","target","type","placeholder","IndexLogin","Login","AddressModal","address","fullAddress","isDaumPost","handleOpenPost","handleAddress","AllAddress","extraAddress","addressType","bname","buildingName","refreshFunction","onComplete","height","top","left","zIndex","border","overflow","SIGNUP_MUTATION","SEND_EMAIL_MUTATION","SignupPage","_sendconfirm","emailAuthenticationValue","sendEmail","tokendata","signup","emailComplete","emailNotComplete","emailUserInput","passwordCheck","userName","gender","phone","birth","getLatLon","lonlatstate","klat","klon","readOnly","emailValueChecking","takeAddress","emailAlert","reload","alert","window","location","IndexSignUp","SignUp","FileUpload","useState","Images","setImages","display","justifyContent","onDrop","files","formData","FormData","append","axios","post","header","then","response","getRootProps","getInputProps","alignItems","CloudDownloadOutlined","overflowX","index","currentIndex","indexOf","newImages","splice","deleteHandler","minWidth","BOARD_UPROAD_MUTATION","BoardWrite","updateImages","imgFiles","Date","utils","MomentUtils","disableToolbar","changePickerData","label","KeyboardButtonProps","IndexWrite","Write","Header","_userDelete","removeItem","withRouter","EMAIL_CHECK_MUTATION","ValidateEmail","validateEmailToken","validateEmail","replace","results","RegExp","exec","search","decodeURIComponent","getParameterByName","BOARD_DETAIL_QUERY","DELETE_SERVICE_BOARD_MUTATION","SERVICE_ACCEPT_MUTATION","BoardDetail","requester","acceptor","requesterTrue","paramsId","match","params","serviceId","detailService","service","serviceimgfiles","imglink","Goback","serviceBoardId","go","FileReUpload","imgLinks","newimage","removeImages","BOARD_UPDATE_MUTATION","BoardUpdate","addImgs","removeImgs","newImage","newimg","rmimg","beforeData","variant","margin","UserInforList","UserBoardArticle","ErrorUrlPage","UserRequest","ErrorNotLogin","USER_EDIT_MUTATION","UserEdit","firstInData","myData","USER_PASSWORD_UPDATE_MUTATION","UserPwdEdit","oldPwd","newPwd","USER_DELETE_MUTATION","UserWithdrawal","UserInforContents","path","exact","render","UserReqComplete","UserAccept","UserAccComplete","UserInformation","IndexUsers","REVIEW_WRITE_MUTATION","FINISH_SERVICE_BOARD_MUTATION","ReviewWrite","reviewFinish","setReviewFinish","serviceTitle","reviewDontClear","MessageUserDetail","opponentData","UserOnRoom","user","roomId","MESSAGES_VIEW_QUERY","MessageUsers","seeRooms","messageData","MessageText","message","messages","mtime","createdAt","from","substring","b","c","messageTime","text","MESSAGE_VIEW_QUERY","ROOM_DATA_QUERY","SEND_MESSAGE_MUTATION","newMessage","unsubscribe","Message","myId","room","roomData","refetch","settingTo","seeRoom","MessageMain","IndexMessage","App","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","errorLink","onError","graphQLErrors","wsLink","WebSocketLink","reconnect","connectionParams","link","split","getMainDefinition","kind","operation","concat","client","ApolloClient","cache","InMemoryCache","ReactDOM"],"mappings":"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","file":"static/js/main.c9f2b681.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst VIEW_SERVICES_BOARD_QUERY = gql`\r\n  query {\r\n    showServices(orderBy: desc) {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      lat\r\n      lon\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      serviceimgfiles {\r\n        id\r\n        imglink\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_SERVICE_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newService {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      lat\r\n      lon\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      serviceimgfiles {\r\n        id\r\n        imglink\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass AlarmDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      address1: \"\",\r\n      address2: \"\",\r\n      ansUser: \"\",\r\n      contents: \"\",\r\n      endAt: \"\",\r\n      id: Number,\r\n      price: Number,\r\n      reqUser: \"\",\r\n      startAt: \"\",\r\n      title: \"\",\r\n      proceeding: \"\",\r\n    };\r\n  }\r\n\r\n  _subscribeToNewLinks = (subscribeToMore) => {\r\n    subscribeToMore({\r\n      document: NEW_SERVICE_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const newServiceData = subscriptionData.data.newService;\r\n        console.log(prev, newServiceData)\r\n        const exists = prev.showServices.find(({ id }) => id === newServiceData.id);\r\n        this.state = newServiceData;\r\n        if (exists) return prev;\r\n          return Object.assign({}, prev, {\r\n            showServices: [newServiceData],\r\n          });\r\n      },\r\n    });\r\n  };\r\n  render() {\r\n    const mapToComponent = (data) => {\r\n      if (data[0]) {\r\n        return data.map((serviceBoardData, i) => {\r\n          if (!serviceBoardData.progress) {\r\n            return (\r\n              <></>\r\n            );\r\n          }\r\n        });\r\n      } else {\r\n        return <div>등록된 게시글이 없습니다.</div>;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Query query={VIEW_SERVICES_BOARD_QUERY}>\r\n          {({ loading, error, data, subscribeToMore }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                  <div>Loading...</div>\r\n                </>\r\n              );\r\n            if (error) return console.log(error);\r\n            this._subscribeToNewLinks(subscribeToMore);\r\n            return (\r\n              <ul>\r\n                <img\r\n              className=\"asiderpng\"\r\n              src=\"/alarm2.png\"\r\n              width=\"px\"\r\n              title=\"알람\"\r\n              alt=\"알람\"\r\n            ></img>\r\n                <li>\r\n                  {this.state.title}\r\n                </li>\r\n              </ul>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlarmDetail;","import React, { Component } from \"react\";\r\nimport AlarmDetail from \"./AlarmDetail\";\r\n\r\nclass AlarmPage extends Component {\r\n  state = {\r\n    alarmState : false\r\n  }\r\n\r\n  alarmON() {\r\n    if(!this.state.alarmState){\r\n      this.setState({\r\n        alarmState: true,\r\n      })\r\n    }\r\n  }\r\n  alarmOFF() {\r\n    if(this.state.alarmState){\r\n      this.setState({\r\n        alarmState: false,\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { alarmState }  = this.state\r\n    return (\r\n      <>\r\n        {!alarmState ?\r\n        (\r\n          <>\r\n          <div onClick={this.alarmON.bind(this)} className=\"asider3\">\r\n            <img\r\n              className=\"asiderpng\"\r\n              src=\"/alarm.png\"\r\n              width=\"px\"\r\n              title=\"알람\"\r\n              alt=\"알람\"\r\n            ></img>\r\n          </div>\r\n          </>\r\n        ) : (\r\n        <>\r\n          <div onClick={this.alarmOFF.bind(this)} className=\"asider3\">\r\n            <img\r\n              className=\"asiderpng\"\r\n              src=\"/alarm.png\"\r\n              width=\"px\"\r\n              title=\"알람\"\r\n              alt=\"알람\"\r\n            ></img>\r\n          </div>\r\n          <div className=\"asider3\">\r\n            <AlarmDetail />\r\n          </div>\r\n        </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default AlarmPage;\r\n","import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport AlarmPage from \"./AlarmPage\"\r\n\r\nclass Aside extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <aside>\r\n          <Link to=\"/Write\"><div className=\"asider4\"><img className=\"asiderpng\" src=\"/write.png\" width=\"px\" title=\"글쓰기\" alt=\"글쓰기\"></img></div></ Link>\r\n          <Link to=\"/message\"><div className=\"asider2\"><img className=\"asiderpng\" src=\"/message.png\" width=\"px\" title=\"채팅\" alt=\"채팅\"></img></div></ Link>\r\n          <AlarmPage />\r\n          <Link to=\"/userInfor\"><div className=\"asider1\"><img className=\"asiderpng\" src=\"/user.png\" width=\"px\" title=\"마이페이지\" alt=\"마이페이지\"></img></div></ Link>\r\n        </aside>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Aside","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Moment from \"react-moment\";\r\n\r\nclass PreviewBoardArticle extends Component {\r\n  render() {\r\n    const serviceBoardData = this.props.serviceBoardData;\r\n    if (serviceBoardData.ansUser) {\r\n      //수락자가 있다면 출력하기\r\n      return (\r\n        <>\r\n          <Link\r\n            to={{\r\n              pathname: `/board/${serviceBoardData.id}`,\r\n              serviceBoardData: serviceBoardData,\r\n            }}\r\n          >\r\n            <article className=\"previewArea\">\r\n              <div className=\"pva-title\">진행중</div>\r\n              <div className=\"pva-sub1\">\r\n                <span className=\"pva-main\">&nbsp;제 목</span> &nbsp;\r\n                {serviceBoardData.title}\r\n                <br></br>\r\n                <span className=\"pva-main\">&nbsp;가 격</span> &nbsp;\r\n                {serviceBoardData.price}\r\n                <br></br>\r\n                <span className=\"pva-main\">&nbsp;장 소</span> &nbsp;\r\n                {serviceBoardData.address1}\r\n              </div>\r\n              <div className=\"pva-sub2\">\r\n                <span className=\"pva-main\">닉네임</span>{\" \"}\r\n                {serviceBoardData.reqUser.nickName}\r\n                <br></br>\r\n                <span className=\"pva-main\">&nbsp;가 격</span> &nbsp;\r\n                {serviceBoardData.price}&nbsp;&#8361;\r\n              </div>\r\n              <br></br>\r\n              <br></br>\r\n              <br></br>\r\n              <br></br>\r\n              <br></br>\r\n              <div className=\"pva-sub3\">\r\n                <span className=\"pva-main\">&nbsp;시 작</span> &nbsp;\r\n                <Moment format=\"YY년&nbsp;MM월&nbsp;DD일&nbsp;hh시&nbsp;mm분\">\r\n                  {serviceBoardData.startAt}\r\n                </Moment>\r\n              </div>\r\n              <div className=\"pva-sub4\">\r\n                <span className=\"pva-main\">&nbsp;종 료</span> &nbsp;\r\n                <Moment format=\"YY년&nbsp;MM월&nbsp;DD일&nbsp;hh시&nbsp;mm분\">\r\n                  {serviceBoardData.endAt}\r\n                </Moment>\r\n              </div>\r\n            </article>\r\n          </Link>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <Link\r\n            to={{\r\n              pathname: `/board/${serviceBoardData.id}`,\r\n              serviceBoardData: serviceBoardData,\r\n            }}\r\n          >\r\n            <article className=\"previewArea\">\r\n              <div className=\"pva-title\">모집중</div>\r\n              <div className=\"pva-sub1\">\r\n                <span className=\"pva-main\">&nbsp;제 목</span> &nbsp;\r\n                {serviceBoardData.title}\r\n                <br></br>\r\n                <span className=\"pva-main\">&nbsp;가 격</span> &nbsp;\r\n                {serviceBoardData.price}\r\n                <br></br>\r\n                <span className=\"pva-main\">&nbsp;장 소</span> &nbsp;\r\n                {serviceBoardData.address1}\r\n              </div>\r\n              <div className=\"pva-sub2\">\r\n                <span className=\"pva-main\">닉네임</span>{\" \"}\r\n                {serviceBoardData.reqUser.nickName}\r\n                <br></br>\r\n                <span className=\"pva-main\">&nbsp;가 격</span> &nbsp;\r\n                {serviceBoardData.price}&nbsp;&#8361;\r\n              </div>\r\n              <br></br>\r\n              <br></br>\r\n              <br></br>\r\n              <br></br>\r\n              <br></br>\r\n              <div className=\"pva-sub3\">\r\n                <span className=\"pva-main\">&nbsp;시 작</span> &nbsp;\r\n                <Moment format=\"YY년&nbsp;MM월&nbsp;DD일&nbsp;hh시&nbsp;mm분\">\r\n                  {serviceBoardData.startAt}\r\n                </Moment>\r\n              </div>\r\n              <div className=\"pva-sub4\">\r\n                <span className=\"pva-main\">&nbsp;종 료</span> &nbsp;\r\n                <Moment format=\"YY년&nbsp;MM월&nbsp;DD일&nbsp;hh시&nbsp;mm분\">\r\n                  {serviceBoardData.endAt}\r\n                </Moment>\r\n              </div>\r\n            </article>\r\n          </Link>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default PreviewBoardArticle;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport PreviewBoardArticle from \"./PreviewBoardArticle\";\r\n\r\nconst VIEW_SERVICES_BOARD_QUERY = gql`\r\n  query {\r\n    showServices(orderBy: desc) {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      lat\r\n      lon\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_SERVICE_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newService {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      lat\r\n      lon\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass PreviewBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      address1: \"\",\r\n      address2: \"\",\r\n      ansUser: \"\",\r\n      contents: \"\",\r\n      endAt: \"\",\r\n      id: Number,\r\n      price: Number,\r\n      reqUser: \"\",\r\n      startAt: \"\",\r\n      title: \"\",\r\n      proceeding: \"\",\r\n    };\r\n  }\r\n\r\n  _subscribeToNewLinks = (subscribeToMore) => {\r\n    subscribeToMore({\r\n      document: NEW_SERVICE_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const newServiceData = subscriptionData.data.newService;\r\n        const exists = prev.showServices.find(({ id }) => id === newServiceData.id);\r\n        if (exists) return prev;\r\n\r\n        return Object.assign({}, prev, {\r\n          showServices: [newServiceData, ...prev.showServices],\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    const proceeding = this.state.proceeding;\r\n    const mapToComponent = (data) => {\r\n      if (data[0]) {\r\n        return data.map((serviceBoardData, i) => {\r\n          if (!serviceBoardData.progress) {\r\n            return (\r\n              <PreviewBoardArticle\r\n                serviceBoardData={serviceBoardData}\r\n                key={i}\r\n                Proceeding={proceeding}\r\n              />\r\n            );\r\n          }\r\n        });\r\n      } else {\r\n        return <div className=\"center\">등록된 게시글이 없습니다.</div>;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Query query={VIEW_SERVICES_BOARD_QUERY}>\r\n          {({ loading, error, data, subscribeToMore }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                  <div>Loading...</div>\r\n                </>\r\n              );\r\n            if (error) return console.log(error);\r\n            if (data) {\r\n              this.state = data.showServices;\r\n            }\r\n            this._subscribeToNewLinks(subscribeToMore);\r\n            // this.state = data.serviceAll.reverse() // graphql query 셀렉트로 가져온 값\r\n            return (\r\n              <>\r\n                <div>\r\n                  <section className=\"previewsection\">\r\n                    {mapToComponent(this.state)}\r\n                    <a href=\"/board\">\r\n                      <div className=\"viewall\">더보기</div>\r\n                    </a>\r\n                  </section>\r\n                </div>\r\n              </>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreviewBoard;\r\n","import React, { Component } from \"react\";\r\nimport { Slide } from \"react-slideshow-image\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\n\r\nconst slideImages = [\r\n  \"images/slide_2.jpg\",\r\n  \"images/slide_3.jpg\",\r\n  \"images/slide_4.jpg\",\r\n];\r\n\r\nconst REVIEW_ALL_QUERY = gql`\r\n  query {\r\n    seeReviews(orderBy: desc) {\r\n      id\r\n      rating_reqUser {\r\n        nickName\r\n      }\r\n      rating\r\n      review\r\n      service {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass MainPageReview extends Component {\r\n  render() {\r\n    const mapToComponent = (review, i) => {\r\n      if (i < 5) {\r\n        return (\r\n          <div className=\"each-slide\">\r\n              <div className=\"slidetext\">\r\n                <div className=\"sliderr\">\r\n                <span className=\"colorblue3\">{review.review}</span>\r\n                <div style={{ backgroundImage: `url(${slideImages[i]})` }}>\r\n                  <br></br>\r\n                  <span className=\"colorblue4\">의뢰인</span> {review.rating_reqUser.nickName}&nbsp;&nbsp;&nbsp;\r\n                  <span className=\"colorblue4\">평점</span> {review.rating}점\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      } else {\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Query query={REVIEW_ALL_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <></>;\r\n            if (error) {\r\n              return <></>;\r\n            }\r\n            if (data) {\r\n              return (\r\n                <div className=\"review\">\r\n                  <Slide easing=\"ease\">\r\n                    {data.seeReviews.map((review, i) => {\r\n                      return <>{mapToComponent(review, i)}</>;\r\n                    })}\r\n                  </Slide>\r\n                </div>\r\n              );\r\n            }\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPageReview;","import React, { Component } from \"react\"\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n      return (\r\n        <>\r\n      <footer>\r\n        <div>&copy;Copyright 2020 HelpCat.&nbsp; All rights reserved.</div>\r\n      </footer>\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Footer","export const AUTH_TOKEN = \"auth-token\";\r\n","/*global kakao*/\r\nimport React, { Component } from \"react\"\r\nimport { AUTH_TOKEN } from '../../constants'\r\n\r\nclass KakaoMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mapGpsOn: false,\r\n      tokenData: localStorage.getItem(\"auth-token\"),\r\n      userData:\"\",\r\n    };\r\n  }\r\n\r\n  GPSOFF() {\r\n    this.setState(() => ({\r\n      mapGpsOn: false\r\n    }));\r\n  };\r\n  GPSON() {\r\n    this.setState(() => ({\r\n      mapGpsOn: true\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    if(this.props.meData){\r\n      this.state.userData = this.props.meData.me\r\n    }\r\n    const serviceData = this.props.serviceData // 등록되있는 서비스 데이터\r\n    const authToken = localStorage.getItem(AUTH_TOKEN)\r\n    const API_KEY = process.env.REACT_APP_KAKAO_API_KEY\r\n    const mapScript = document.createElement(\"script\");\r\n    mapScript.async = true;\r\n    mapScript.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${API_KEY}&autoload=false&libraries=services`;\r\n    document.head.appendChild(mapScript);\r\n    mapScript.onload = () => {\r\n      kakao.maps.load(() => { // 카카오 맵이 로딩이 다 되면\r\n        // 주소-좌표 변환 객체를 생성합니다\r\n        var geocoder = new kakao.maps.services.Geocoder();\r\n        const errandPlace = []; // DB에서 온 심부름장소 담을 배열 생성\r\n        for(let i = 0; i < serviceData.length; i++){ //심부름 장소 담기\r\n          if(serviceData[i].progress === false){\r\n            errandPlace[errandPlace.length] = {id: serviceData[i].id, name: serviceData[i].title, place: serviceData[i].address1}\r\n          }\r\n        }\r\n\r\n        //마커 아이콘 바꾸기\r\n        var icon = new kakao.maps.MarkerImage(\r\n          'fixedmarker.gif', new kakao.maps.Size(61, 65),{\r\n              offset: new kakao.maps.Point(36, 54),\r\n              alt: \"마커다냥\",\r\n              shape: \"poly\",\r\n              coords: \"1,20,1,9,5,2,10,0,21,0,27,3,30,9,30,20,17,33,14,33\"\r\n          }\r\n        );\r\n\r\n        // 로그인이 되어있고, 토글이 true이면 유저집으로 세팅 / false면 현재위치 지도 세팅\r\n        if (authToken && !(this.state.mapGpsOn)) { //로그인 되있고, GPS기능 꺼져 있을때\r\n          //주소로 위도경도 검색\r\n          geocoder.addressSearch(this.state.userData.address1, function(result, status) {\r\n\r\n            // 정상적으로 검색이 완료됐으면\r\n            if (status === kakao.maps.services.Status.OK) {\r\n\r\n              var lat = result[0].y, // 위도\r\n              lon = result[0].x; // 경도\r\n\r\n              //현재 위치로 메인을 잡아줌\r\n              let container = document.getElementById(\"map\");\r\n              let options = {\r\n                center: new kakao.maps.LatLng(lat, lon),\r\n                level: 6\r\n              };\r\n\r\n              const map = new kakao.maps.Map(container, options);\r\n              MarkersOverlay(map) // 유저집주소 맵에 심부름 마커뿌리기\r\n            }\r\n          });\r\n        }\r\n        else if(!authToken && !(this.state.mapGpsOn)){ //로그인 되있고, GPS기능 켜져 있을때\r\n          var lat = 37.403625, // 위도 ,\r\n          lon = 126.930337; // 경도\r\n\r\n          //현재 위치로 메인을 잡아줌\r\n          let container = document.getElementById(\"map\");\r\n          let options = {\r\n            center: new kakao.maps.LatLng(lat, lon),\r\n            level: 6\r\n          };\r\n          const map = new kakao.maps.Map(container, options);\r\n          MarkersOverlay(map)// 현재위치 맵에 심부름 마커뿌리기\r\n        }\r\n        else if(this.state.mapGpsOn){ //비로그인이고, GPS기능 꺼져있을때\r\n\r\n          // GPS로 현재 위치를 가져와 지도의 메인으로 정함\r\n          navigator.geolocation.getCurrentPosition(function(result) {\r\n            var lat = result.coords.latitude, // 위도\r\n                lon = result.coords.longitude; // 경도\r\n\r\n            //현재 위치로 메인을 잡아줌\r\n            let container = document.getElementById(\"map\");\r\n            let options = {\r\n              center: new kakao.maps.LatLng(lat, lon),\r\n              level: 6\r\n            };\r\n            const map = new kakao.maps.Map(container, options);\r\n            MarkersOverlay(map)// 현재위치 맵에 심부름 마커뿌리기\r\n          });\r\n        }\r\n\r\n        function MarkersOverlay(map) {\r\n          //마커들 뿌리는 반복문 시작\r\n          for (let i = 0; i < errandPlace.length; i++) {\r\n            // 심부름장소들 데이터 위도 적도로 변환\r\n            geocoder.addressSearch(errandPlace[i].place, function(result, status) {\r\n              // 정상적으로 검색이 완료됐으면\r\n              if (status === kakao.maps.services.Status.OK) {\r\n\r\n                // 마커, 커스텀 오버레이가 표시될 위치\r\n                var position = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n\r\n                // 마커에 변환된 위도/경도 넘겨서 저장함\r\n                var marker = new kakao.maps.Marker({\r\n                  position: position,\r\n                  image: icon\r\n                });\r\n                marker.setMap(map); // 마커가 지도 위에 표시되도록 설정\r\n                //커스텀 오버레이에 표시될 텍스트\r\n                var content = `\r\n                  <div class=\"customoverlay\">\r\n                    <a href=\"/board/${(errandPlace[i].id)}\" >\r\n                      <span class=\"title\">${errandPlace[i].name}</span>\r\n                    </a>\r\n                  </div>\r\n                `;\r\n\r\n                // 커스텀 오버레이를 생성합니다\r\n                var customOverlay = new kakao.maps.CustomOverlay({\r\n                    position: position,\r\n                    content: content,\r\n                    yAnchor: 1\r\n                });\r\n                customOverlay.setMap(map); // 커스텀 오버레이가 지도 위에 표시되도록 설정합니다.\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <main id=\"map\" className=\"map\">\r\n        </main>\r\n        <button className={this.state.mapGpsOn ? \"mapbutton1\": \"mapbutton1_Clicked\"} onClick={this.GPSOFF = this.GPSOFF.bind(this)}>\r\n          {this.state.mapGpsOn ? \"우리집\" : \"우리집\"}\r\n        </button>\r\n        <button className={this.state.mapGpsOn ? \"mapbutton2_Clicked\": \"mapbutton2\"} onClick={this.GPSON = this.GPSON.bind(this)}>\r\n          {this.state.mapGpsOn ? \"현위치\" : \"현위치\"}\r\n        </button>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default KakaoMap","import React, { Component } from \"react\"\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport KakaoMap from \"./KakaoMap\";\r\n\r\nconst USER_DATA_QUERY = gql`\r\n  query{\r\n    me{\r\n      id,\r\n      email,\r\n      userName,\r\n      address1\r\n    }\r\n  }\r\n`;\r\n\r\nclass MapMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      serviceData: \"\",\r\n      meData: \"\",\r\n\r\n    };\r\n  }\r\n\r\n  render(){\r\n    const serviceData = this.props.serviceData.showServices\r\n    return (\r\n      <>\r\n        <Query query={USER_DATA_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <><div className=\"map2\">Loading...</div></>\r\n            if (error) return <KakaoMap serviceData={serviceData} meData={undefined}/>\r\n            const meData = data;\r\n            return (\r\n              <>\r\n                <KakaoMap serviceData={serviceData} meData={meData}/>\r\n              </>\r\n            )\r\n          }}\r\n        </Query>\r\n\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MapMain","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport Aside from \"../basics/Aside\";\r\nimport PreviewBoard from \"./PreviewBoard\";\r\nimport MainPageReview from \"./MainPageReview\";\r\nimport Footer from \"../basics/Footer\";\r\nimport MapMain from \"./MapMain\";\r\n\r\nconst VIEW_SERVICES_BOARD_QUERY = gql`\r\n  query {\r\n    showServices(orderBy: desc) {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      startAt\r\n      endAt\r\n      progress\r\n      serviceimgfiles{\r\n        imglink\r\n      }\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass IndexMain extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Query query={VIEW_SERVICES_BOARD_QUERY}>\r\n          {({ loading, error, data, subscribeToMore }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                  <div>Loading...</div>\r\n                </>\r\n              );\r\n            if (error)\r\n              return (\r\n                <>\r\n                  <MapMain serviceData={undefined} />\r\n                  <Aside />\r\n                  <PreviewBoard serviceData={undefined} />\r\n                  <MainPageReview />\r\n                  <Footer />\r\n                </>\r\n              );\r\n            if (data) {\r\n              return (\r\n                <>\r\n                  <MapMain serviceData={data} />\r\n                  <Aside />\r\n                  <PreviewBoard serviceData={data} />\r\n                  <MainPageReview />\r\n                  <Footer />\r\n                </>\r\n              );\r\n            }\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IndexMain;\r\n","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport IndexMain from \"../components/mains/IndexMain\";\r\nimport \"../css/reset.css\";\r\nimport \"../css/main.css\";\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <Route component={IndexMain} />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Main","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Moment from \"react-moment\";\r\n\r\nclass BoardPageArticle extends Component {\r\n  render() {\r\n    const serviceBoardData = this.props.serviceBoardData;\r\n    if (this.props.Proceeding) {\r\n      if (serviceBoardData.ansUser) {\r\n        //수락자가 없다면 출력하기\r\n        return (\r\n          <>\r\n            <Link\r\n              to={{\r\n                pathname: `/board/${serviceBoardData.id}`,\r\n              }}\r\n            >\r\n              <article className=\"previewArea2\">\r\n                <div className=\"pva-sub1\">\r\n                  <span className=\"pva-main\">&nbsp;제 목</span> &nbsp;\r\n                  {serviceBoardData.title}\r\n                  <br></br>\r\n                  <span className=\"pva-main\">&nbsp;가 격</span> &nbsp;\r\n                  {serviceBoardData.price}\r\n                  <br></br>\r\n                  <span className=\"pva-main\">&nbsp;장 소</span> &nbsp;\r\n                  {serviceBoardData.address1}\r\n                </div>\r\n                <div className=\"pva-sub2\">\r\n                  <span className=\"pva-main\">닉네임</span>{\" \"}\r\n                  {serviceBoardData.reqUser.nickName}\r\n                  <br></br>\r\n                  <span className=\"pva-main\">&nbsp;가 격</span> &nbsp;\r\n                  {serviceBoardData.price}&nbsp;&#8361;\r\n                </div>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <div className=\"pva-sub3\">\r\n                  <span className=\"pva-main\"> 시 작</span> &nbsp;\r\n                  <Moment format=\"MM월 DD일 hh시 mm분\">\r\n                    {serviceBoardData.startAt}\r\n                  </Moment>\r\n                </div>\r\n                <div className=\"pva-sub4\">\r\n                  <span className=\"pva-main\"> 종 료</span> &nbsp;\r\n                  <Moment format=\"MM월 DD일 hh시 mm분\">\r\n                    {serviceBoardData.endAt}\r\n                  </Moment>\r\n                </div>\r\n              </article>\r\n            </Link>\r\n          </>\r\n        );\r\n      } else {\r\n        return <></>;\r\n      }\r\n    } else {\r\n      if (!serviceBoardData.ansUser) {\r\n        //수락자가 없다면 출력하기\r\n        return (\r\n          <>\r\n            <Link\r\n              to={{\r\n                pathname: `/board/${serviceBoardData.id}`,\r\n                serviceBoardData: serviceBoardData,\r\n              }}\r\n            >\r\n              <article className=\"previewArea2\">\r\n                <div className=\"pva-sub1\">\r\n                  <span className=\"pva-main\">&nbsp;제 목</span> &nbsp;\r\n                  {serviceBoardData.title}\r\n                  <br></br>\r\n                  <span className=\"pva-main\">&nbsp;가 격</span> &nbsp;\r\n                  {serviceBoardData.price}\r\n                  <br></br>\r\n                  <span className=\"pva-main\">&nbsp;장 소</span> &nbsp;\r\n                  {serviceBoardData.address1}\r\n                </div>\r\n                <div className=\"pva-sub2\">\r\n                  <span className=\"pva-main\">닉네임</span>{\" \"}\r\n                  {serviceBoardData.reqUser.nickName}\r\n                  <br></br>\r\n                  <span className=\"pva-main\">&nbsp;가 격</span> &nbsp;\r\n                  {serviceBoardData.price}&nbsp;&#8361;\r\n                </div>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <div className=\"pva-sub3\">\r\n                  <span className=\"pva-main\"> 시 작</span> &nbsp;\r\n                  <Moment format=\"MM/DD hh:mm\">\r\n                    {serviceBoardData.startAt}\r\n                  </Moment>\r\n                </div>\r\n                <div className=\"pva-sub4\">\r\n                  <span className=\"pva-main\">&nbsp;종 료</span> &nbsp;\r\n                  <Moment format=\"MM/DD hh:mm\">{serviceBoardData.endAt}</Moment>\r\n                </div>\r\n              </article>\r\n            </Link>\r\n          </>\r\n        );\r\n      } else {\r\n        return <></>;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BoardPageArticle;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport BoardPageArticle from \"./BoardPageArticle\";\r\n\r\nconst VIEW_SERVICES_BOARD_QUERY = gql`\r\n  query {\r\n    showServices(orderBy: desc) {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      lat\r\n      lon\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      serviceimgfiles {\r\n        id\r\n        imglink\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_SERVICE_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newService {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      lat\r\n      lon\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      serviceimgfiles {\r\n        id\r\n        imglink\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass BoardPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      address1: \"\",\r\n      address2: \"\",\r\n      ansUser: \"\",\r\n      contents: \"\",\r\n      endAt: \"\",\r\n      id: Number,\r\n      price: Number,\r\n      reqUser: \"\",\r\n      startAt: \"\",\r\n      title: \"\",\r\n      proceeding: \"\",\r\n    };\r\n  }\r\n\r\n  _subscribeToNewLinks = (subscribeToMore) => {\r\n    subscribeToMore({\r\n      document: NEW_SERVICE_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const newServiceData = subscriptionData.data.newService;\r\n        const exists = prev.showServices.find(({ id }) => id === newServiceData.id);\r\n        if (exists) return prev;\r\n        console.log(newServiceData, prev.showServices, prev )\r\n        return Object.assign({}, prev, {\r\n          showServices: [newServiceData, ...prev.showServices],\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  nowProceeding() {\r\n    this.setState({\r\n      proceeding: true,\r\n    });\r\n  }\r\n  notProceeding() {\r\n    this.setState({\r\n      proceeding: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const proceeding = this.state.proceeding;\r\n    const mapToComponent = (data) => {\r\n      if (data[0]) {\r\n        return data.map((serviceBoardData, i) => {\r\n          if (!serviceBoardData.progress) {\r\n            return (\r\n              <BoardPageArticle\r\n                serviceBoardData={serviceBoardData}\r\n                key={i}\r\n                Proceeding={proceeding}\r\n              />\r\n            );\r\n          }\r\n        });\r\n      } else {\r\n        return <div>등록된 게시글이 없습니다.</div>;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Query query={VIEW_SERVICES_BOARD_QUERY}>\r\n          {({ loading, error, data, subscribeToMore }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                  <div>Loading...</div>\r\n                </>\r\n              );\r\n            if (error) return console.log(error);\r\n            if (data) {\r\n              this.state = data.showServices;\r\n            }\r\n            this._subscribeToNewLinks(subscribeToMore);\r\n            return (\r\n              <div className=\"writeform2\">\r\n              <>\r\n                {proceeding ? (\r\n                  <>\r\n                    <button className=\"boardbtn1\" onClick={this.notProceeding.bind(this)}>진행 중</button>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <button className=\"boardbtn1\" onClick={this.nowProceeding.bind(this)}>모집 중</button>\r\n                  </>\r\n                )}\r\n                <div>\r\n                  <section className=\"boardmain2\">\r\n                    {mapToComponent(this.state)}\r\n                  </section>\r\n                </div>\r\n              </>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardPage;\r\n","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport BoardPage from \"./BoardPage\"\r\nimport Aside from \"../basics/Aside\"\r\nimport Footer from \"../basics/Footer\"\r\n\r\n\r\n\r\nclass IndexBoard extends Component {\r\n  render() {\r\n      return (\r\n        <>\r\n        <Route component={BoardPage} />\r\n        <Aside />\r\n        <Footer />\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default IndexBoard","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport IndexBoard from \"../components/board/IndexBoard\";\r\nimport \"../css/reset.css\";\r\nimport \"../css/main.css\";\r\n\r\n\r\nclass Board extends Component {\r\n  render() {\r\n\t\treturn (\r\n      <Route component={IndexBoard} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Board","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AUTH_TOKEN } from \"../../constants\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation login($email: Email!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        id\r\n        email\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass LoginPage extends Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    name: \"\",\r\n  };\r\n  render() {\r\n    const { email, password } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Mutation\r\n          mutation={LOGIN_MUTATION}\r\n          onCompleted={(data) => this._confirm(data)}\r\n        >\r\n          {(mutation) => (\r\n            <div className=\"login\">\r\n              {/* Help Cat */}\r\n              <div className=\"loginform\">\r\n                <img\r\n                  alt=\"로그인\"\r\n                  className=\"nomargin\"\r\n                  src=\"logincat.png\"\r\n                  width=\"80px\"\r\n                ></img>\r\n                <form\r\n                  onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    mutation({ variables: { email, password } });\r\n                  }}\r\n                >\r\n                  <div className=\"loginInput\">\r\n                    <div className=\"loginID\">\r\n                      <input\r\n                        value={email}\r\n                        onChange={(e) =>\r\n                          this.setState({ email: e.target.value })\r\n                        }\r\n                        type=\"text\"\r\n                        placeholder=\"&nbsp;아이디를 입력하세요\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"loginPW\">\r\n                      <input\r\n                        value={password}\r\n                        onChange={(e) =>\r\n                          this.setState({ password: e.target.value })\r\n                        }\r\n                        type=\"password\"\r\n                        placeholder=\"&nbsp;비밀번호를 입력하세요\"\r\n                      />\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"signButton\">\r\n                      로그인\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n\r\n                <div className=\"miniID\">\r\n                  <div className=\"newID\">\r\n                    <Link to=\"/signup\">회원가입</Link>\r\n                  </div>\r\n                  &nbsp;/&nbsp;\r\n                  <div className=\"findID\">ID찾기</div>\r\n                </div>\r\n                <div className=\"GroupSNS\">\r\n                  <div className=\"GoogleID\">\r\n                    <img\r\n                      alt=\"googlelogo\"\r\n                      src=\"googlelogo.png\"\r\n                      width=\"100px\"\r\n                    ></img>\r\n                  </div>\r\n                  <div className=\"NaverID\">\r\n                    <img\r\n                      alt=\"naverlogo\"\r\n                      src=\"naverlogo.svg\"\r\n                      width=\"100px\"\r\n                    ></img>\r\n                  </div>\r\n                  <div className=\"FacebookID\">\r\n                    <img\r\n                      alt=\"facebooklogo\"\r\n                      src=\"facebooklogo.png\"\r\n                      width=\"100px\"\r\n                    ></img>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Mutation>\r\n      </>\r\n    );\r\n  }\r\n\r\n  _confirm = async (data) => {\r\n    const { token } = data.login;\r\n    this._saveUserData(token);\r\n    this.props.history.push(`/`);\r\n  };\r\n\r\n  _saveUserData = (token) => {\r\n    localStorage.setItem(AUTH_TOKEN, token);\r\n  };\r\n}\r\n\r\nexport default LoginPage;\r\n","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport LoginPage from \"./LoginPage\";\r\nimport Footer from \"../basics/Footer\";\r\nimport Aside from \"../basics/Aside\";\r\n\r\n\r\n\r\nclass IndexLogin extends Component {\r\n  render() {\r\n\t\treturn (\r\n      <>\r\n\t\t\t\t<Route component={LoginPage} />\r\n\t\t\t\t<Aside />\r\n\t\t\t\t<Footer />\r\n\t\t\t</>\r\n    )\r\n  }\r\n}\r\n\r\nexport default IndexLogin","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport IndexLogin from \"../components/logins/IndexLogin\";\r\nimport \"../css/reset.css\";\r\nimport \"../css/main.css\";\r\n\r\nclass Login extends Component {\r\n  render() {\r\n\t\treturn (\r\n\t\t\t<Route component={IndexLogin} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login","import React, { Component } from \"react\";\r\nimport DaumPostCode from \"react-daum-postcode\";\r\nclass AddressModal extends Component {\r\n  state = {\r\n    address: \"\",\r\n    fullAddress: \"\",\r\n    isDaumPost: false,\r\n  };\r\n\r\n  handleOpenPost = () => {\r\n    this.setState({\r\n      isDaumPost: true,\r\n    });\r\n  };\r\n\r\n  // postcode\r\n  handleAddress = (data) => {\r\n    let AllAddress = data.address;\r\n    let extraAddress = \"\";\r\n\r\n    if (data.addressType === \"R\") {\r\n      if (data.bname !== \"\") {\r\n        extraAddress += data.bname;\r\n      }\r\n      if (data.buildingName !== \"\") {\r\n        extraAddress += extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n      }\r\n      AllAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\r\n    }\r\n    this.setState({\r\n      fullAddress: AllAddress,\r\n      isDaumPost: false,\r\n    });\r\n    console.log(this.props);\r\n    this.props.refreshFunction(AllAddress);\r\n  };\r\n\r\n  render() {\r\n    // const { isModalShow, isModalClose } = this.props;\r\n    // const { fullAddress } = this.state;\r\n    const { isDaumPost } = this.state;\r\n    // DaumPostCode style\r\n    const width = 595;\r\n    const height = 450;\r\n    const modalStyle = {\r\n      position: \"absolute\",\r\n      top: \"30%\",\r\n      left: \"35%\",\r\n      zIndex: \"100\",\r\n      border: \"2px solid #bababa\",\r\n      overflow: \"hidden\",\r\n    };\r\n    return (\r\n      <div className=\"modalRow\">\r\n        <div className=\"modalCell\">\r\n          <div className=\"cellFirst\">\r\n            <button className=\"postbtn\" type=\"button\" onClick={this.handleOpenPost}>\r\n              <span>우편번호 찾기</span>\r\n            </button>\r\n          </div>\r\n          {isDaumPost ? (\r\n            <DaumPostCode\r\n              onComplete={this.handleAddress}\r\n              // autoClose\r\n              width={width}\r\n              height={height}\r\n              style={modalStyle}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {/* <div className=\"addressBox\">\r\n            <input type=\"text\" value={address} name=\"address\" onChange={this.handleInput} />\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddressModal;\r\n","/*global kakao*/\r\nimport React, { Component } from \"react\";\r\nimport { AUTH_TOKEN } from \"../../constants\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport AddressModal from \"../utils/daumPostcode\";\r\n\r\nconst SIGNUP_MUTATION = gql`\r\n  mutation signup(\r\n    $email: Email!\r\n    $password: String!\r\n    $userName: String!\r\n    $nickName: String!\r\n    $gender: String!\r\n    $phone: String!\r\n    $address1: String!\r\n    $address2: String!\r\n    $birth: String!\r\n    $lat: Float!\r\n    $lon: Float!\r\n  ) {\r\n    signup(\r\n      email: $email\r\n      password: $password\r\n      userName: $userName\r\n      nickName: $nickName\r\n      gender: $gender\r\n      phone: $phone\r\n      address1: $address1\r\n      address2: $address2\r\n      birth: $birth\r\n      lat: $lat\r\n      lon: $lon\r\n    ) {\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst SEND_EMAIL_MUTATION = gql`\r\n  mutation SendEmailMutation($email: String!) {\r\n    sendEmail(email: $email)\r\n  }\r\n`;\r\n\r\nclass SignupPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      emailComplete: false,\r\n      emailNotComplete: false,\r\n      emailAuthenticationValue: false, //이메일 인증코드 값\r\n      emailUserInput: null, // 이메일 인증코드 사용자 입력값\r\n      password: \"\",\r\n      passwordCheck: \"\",\r\n      userName: \"\",\r\n      nickName: \"\",\r\n      gender: \"\",\r\n      phone: \"\",\r\n      address1: \"\",\r\n      address2: \"\",\r\n      birth: \"\",\r\n      lat: Number,\r\n      lon: Number,\r\n    };\r\n  }\r\n\r\n  emailValueChecking() {\r\n    if (this.state.emailUserInput === this.state.emailAuthenticationValue) {\r\n      this.setState({\r\n        emailComplete: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        emailNotComplete: true,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const API_KEY = process.env.REACT_APP_KAKAO_API_KEY;\r\n    const {\r\n      email,\r\n      password,\r\n      passwordCheck,\r\n      userName,\r\n      nickName,\r\n      gender,\r\n      phone,\r\n      address1,\r\n      address2,\r\n      birth,\r\n      lat,\r\n      lon,\r\n    } = this.state;\r\n\r\n    const takeAddress = (takeAddress) => {\r\n      this.setState({\r\n        address1: takeAddress,\r\n      });\r\n      getLatLon();\r\n    };\r\n\r\n    const getLatLon = () => {\r\n      const mapScript = document.createElement(\"script\");\r\n      mapScript.async = true;\r\n      mapScript.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${API_KEY}&autoload=false&libraries=services`;\r\n      document.head.appendChild(mapScript);\r\n      mapScript.onload = () => {\r\n        kakao.maps.load(() => {\r\n          // 카카오 맵이 로딩이 다 되면\r\n          // 주소-좌표 변환 객체를 생성합니다\r\n          const geocoder = new kakao.maps.services.Geocoder();\r\n          geocoder.addressSearch(this.state.address1, function (result, status) {\r\n            // 정상적으로 검색이 완료됐으면\r\n            if (status === kakao.maps.services.Status.OK) {\r\n              let lat = Number(result[0].y); // 위도\r\n              let lon = Number(result[0].x); // 경도\r\n              lonlatstate(lat, lon);\r\n            }\r\n          });\r\n        });\r\n      };\r\n      return <></>;\r\n    };\r\n\r\n    const lonlatstate = (klat, klon) => {\r\n      this.setState({\r\n        lat: klat,\r\n        lon: klon,\r\n      });\r\n    };\r\n\r\n    console.log(this.state.emailAuthenticationValue);\r\n    return (\r\n      <>\r\n        <div className=\"signup\">\r\n          <form>\r\n            <div className=\"signupform\">\r\n              <img alt=\"회원가입\" className=\"nomargin\" src=\"signupcat.png\" width=\"80px\"></img>\r\n              <div className=\"email\">\r\n                {!this.state.emailComplete ?\r\n                <input\r\n                  className=\"signupinput1\"\r\n                  value={email}\r\n                  onChange={(e) => this.setState({ email: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"인증받으실 이메일을 입력해주세요\"\r\n                />\r\n                :\r\n                <input\r\n                  className=\"signupinput1\"\r\n                  value={email}\r\n                  onChange={(e) => this.setState({ email: e.target.value })}\r\n                  type=\"text\"\r\n                  readOnly\r\n                />\r\n                }\r\n              </div>\r\n              <Mutation\r\n                mutation={SEND_EMAIL_MUTATION}\r\n                variables={{ email }}\r\n                onCompleted={(data) => this._sendconfirm(data)}\r\n              >\r\n                {(mutation) => (\r\n                  <>\r\n                    {this.state.emailAuthenticationValue ? (\r\n                      <>\r\n                      {!this.state.emailComplete ? (\r\n                        <>\r\n                        <h1>발송 되었습니다!</h1>\r\n                        <input\r\n                          className=\"mailsubmit\"\r\n                          readOnly\r\n                          onClick={mutation}\r\n                          value=\"재발송하기\"\r\n                        ></input>\r\n                        </>\r\n                      ): \"\"\r\n                      }\r\n                      </>\r\n                    ) : (\r\n                      <input\r\n                        className=\"mailsubmit\"\r\n                        readOnly\r\n                        onClick={mutation}\r\n                        value=\"이메일 인증\"\r\n                      ></input>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </Mutation>\r\n              {!this.state.emailComplete ?\r\n              <div className=\"email\">\r\n                <input\r\n                  className=\"signupinput2\"\r\n                  onChange={(e) => this.setState({ emailUserInput: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"전송받으신 인증코드를 입력해주세요\"\r\n                />\r\n              </div>\r\n              :\"\"\r\n              }\r\n              {!this.state.emailComplete ? ( //이메일이 인증이 안되었는지 묻기\r\n                <>\r\n                  {this.state.emailNotComplete ? ( //이메일 인증 안된상태로 버튼 눌렀는지 묻기\r\n                    <div>인증값이 올바르지 않습니다.</div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <input\r\n                    className=\"mailsubmit\"\r\n                    readOnly\r\n                    value=\"인증값 확인\"\r\n                    onClick={this.emailValueChecking.bind(this)}\r\n                  ></input>\r\n                </>\r\n              ) : (\r\n                <div>이메일이 인증되었습니다.!</div>\r\n              )}\r\n            </div>\r\n          </form>\r\n          <form>\r\n            <div className=\"signupform2\">\r\n              <div className=\"nickName\">\r\n                <input\r\n                  className=\"signupinput3\"\r\n                  value={nickName}\r\n                  onChange={(e) => this.setState({ nickName: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"사용할 닉네임을 입력해주세요\"\r\n                />\r\n              </div>\r\n              <div className=\"userName\">\r\n                <input\r\n                  value={userName}\r\n                  onChange={(e) => this.setState({ userName: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"사용자 이름을 입력해주세요\"\r\n                />\r\n              </div>\r\n              <div className=\"password\">\r\n                <input\r\n                  value={password}\r\n                  onChange={(e) => this.setState({ password: e.target.value })}\r\n                  type=\"password\"\r\n                  placeholder=\"비밀번호를 입력해주세요\"\r\n                />\r\n              </div>\r\n              <div className=\"passwordcheck\">\r\n                <input\r\n                type=\"password\"\r\n                placeholder=\"비밀번호를 재입력해주세요\"\r\n                onChange={(e) => this.setState({ passwordCheck: e.target.value })}\r\n                ></input>\r\n                {password && passwordCheck ?\r\n                  <div>{password === passwordCheck ? <span className=\"colorblue\">확인되었습니다.</span> :<span className=\"colorblack\">올바르지 않습니다.</span>}</div>\r\n                  : \"\"\r\n                }\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <form>\r\n            <div className=\"signupform3\">\r\n              <div className=\"gender\">\r\n                <label>\r\n                  <input\r\n                    value=\"M\"\r\n                    onChange={(e) => this.setState({ gender: e.target.value })}\r\n                    type=\"radio\"\r\n                    name=\"gender\"\r\n                  />{\" \"}\r\n                  남자\r\n                </label>\r\n                <label>\r\n                  <input\r\n                    value=\"W\"\r\n                    onChange={(e) => this.setState({ gender: e.target.value })}\r\n                    type=\"radio\"\r\n                    name=\"gender\"\r\n                  />{\" \"}\r\n                  여자\r\n                </label>\r\n              </div>\r\n              <div className=\"birth\">\r\n                <input\r\n                  value={birth}\r\n                  onChange={(e) => this.setState({ birth: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"생년월일을 -없이 입력해주세요&nbsp;&nbsp;&nbsp;&nbsp;ex)971006\"\r\n                />\r\n              </div>\r\n              <div className=\"phone\">\r\n                <input\r\n                  value={phone}\r\n                  onChange={(e) => this.setState({ phone: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"전화번호를 -없이 입력해주세요&nbsp;&nbsp;&nbsp;&nbsp;ex)01012345678\"\r\n                />\r\n              </div>\r\n              <div className=\"address\">\r\n                <input\r\n                  value={address1}\r\n                  readOnly\r\n                  type=\"text\"\r\n                  placeholder=\"우편번호 찾기를 이용해주세요\"\r\n                />\r\n                <AddressModal refreshFunction={takeAddress.bind(this)} />\r\n              </div>\r\n              <div className=\"address\">\r\n                <input\r\n                  value={address2}\r\n                  onChange={(e) => this.setState({ address2: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"상세주소를 입력해주세요\"\r\n                />\r\n              </div>\r\n              <div>\r\n                {this.state.emailComplete ? (\r\n                  <Mutation\r\n                    mutation={SIGNUP_MUTATION}\r\n                    variables={{\r\n                      email,\r\n                      password,\r\n                      userName,\r\n                      nickName,\r\n                      gender,\r\n                      phone,\r\n                      address1,\r\n                      address2,\r\n                      birth,\r\n                      lat,\r\n                      lon,\r\n                    }}\r\n                    onCompleted={(data) => this._confirm(data)}\r\n                  >\r\n                    {(mutation) => (\r\n                      <input className=\"submit\" onClick={mutation} readOnly value=\"제출\"></input>\r\n                    )}\r\n                  </Mutation>\r\n                ) : (\r\n                  <input\r\n                    className=\"submit\"\r\n                    onClick={this.emailAlert.bind(this)}\r\n                    readOnly\r\n                    value=\"제출\"\r\n                  ></input>\r\n                )}\r\n                <input\r\n                  type=\"reset\"\r\n                  className=\"reset\"\r\n                  onClick={this.reload}\r\n                  readOnly\r\n                  value=\"초기화\"\r\n                ></input>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  emailAlert() {\r\n    alert(\"이메일 인증이 필요합니다.\");\r\n  }\r\n  reload() {\r\n    window.location.reload();\r\n  }\r\n  _sendconfirm = async (data) => {\r\n    this.setState({\r\n      emailAuthenticationValue: data.sendEmail,\r\n    });\r\n  };\r\n\r\n  _confirm = async (data) => {\r\n    const tokendata = data.signup.token;\r\n    this._saveUserData(tokendata);\r\n    this.props.history.push(`/`);\r\n  };\r\n\r\n  _saveUserData = (tokendata) => {\r\n    localStorage.setItem(AUTH_TOKEN, tokendata);\r\n  };\r\n}\r\n\r\nexport default SignupPage;\r\n","import React, { Component } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport SignupPage from \"./SignupPage\";\r\nimport Aside from \"../basics/Aside\";\r\nimport Footer from \"../basics/Footer\";\r\n\r\nclass IndexSignUp extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Route component={SignupPage} />\r\n        <Aside />\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IndexSignUp;\r\n","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport IndexSignUp from \"../components/logins/IndexSignUp\";\r\nimport \"../css/reset.css\";\r\nimport \"../css/main.css\";\r\n\r\n\r\nclass SignUp extends Component {\r\n  render() {\r\n    return (\r\n      <Route component={IndexSignUp} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default SignUp","import React, { useState } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { CloudDownloadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction FileUpload(props) {\r\n  const [Images, setImages] = useState([]);\r\n\r\n  const dropHandler = (files) => {\r\n    let formData = new FormData();\r\n    const config = {\r\n      header: { \"content-type\": \"multipart/form-data\" },\r\n    };\r\n    formData.append(\"imgFile\", files[0]);\r\n    axios.post(\"http://localhost:4000/api/upload\", formData, config).then((response) => {\r\n      if (response.data.location) {\r\n        setImages([...Images, response.data.location]);\r\n        props.refreshFunction([...Images, response.data.location]);\r\n      } else {\r\n        alert(\"파일을 저장하는 데에 실패했습니다.\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteHandler = (image) => {\r\n    const currentIndex = Images.indexOf(image);\r\n    let newImages = [...Images];\r\n    newImages.splice(currentIndex, 1);\r\n    setImages(newImages);\r\n    props.refreshFunction(newImages);\r\n  };\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n      <Dropzone onDrop={dropHandler}>\r\n        {({ getRootProps, getInputProps }) => (\r\n          <div\r\n            style={{\r\n              width: 214,\r\n              height: 150,\r\n              border: \"2px solid #bababa\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n            {...getRootProps()}\r\n          >\r\n            <input {...getInputProps()} />\r\n            <CloudDownloadOutlined />\r\n          </div>\r\n        )}\r\n      </Dropzone>\r\n\r\n      <div style={{ display: \"flex\", width: \"214px\", height: \"150px\", overflowX: \"scroll\", border: \"2px solid #bababa\"}}>\r\n        {Images.map((image, index) => (\r\n          <div onClick={() => deleteHandler(image)} key={index}>\r\n            <img alt=\"uploadImages\" style={{ minWidth: \"200px\", width: \"200px\", height: \"120px\" }} src={`${image}`} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileUpload;\r\n","/*global kakao*/\r\nimport React, { Component } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport FileUpload from \"./FileUpload\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddressModal from \"../utils/daumPostcode\";\r\n\r\n\r\nconst BOARD_UPROAD_MUTATION = gql`\r\n  mutation BoardUproadMutation(\r\n    $title: String!\r\n    $contents: String!\r\n    $price: Int!\r\n    $address1: String\r\n    $address2: String\r\n    $lat: Float\r\n    $lon: Float\r\n    $imgFiles: [String!]\r\n    $startAt: DateTime\r\n    $endAt: DateTime\r\n  ) {\r\n    addService(\r\n      title: $title\r\n      contents: $contents\r\n      price: $price\r\n      address1: $address1\r\n      address2: $address2\r\n      lat: $lat\r\n      lon: $lon\r\n      imgFiles: $imgFiles\r\n      startAt: $startAt\r\n      endAt: $endAt\r\n    )\r\n  }\r\n`;\r\n\r\nclass BoardWrite extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      contents: \"\",\r\n      price: Number,\r\n      address1: \"\",\r\n      address2: \"\",\r\n      lat: Number,\r\n      lon: Number,\r\n      imgFiles: [],\r\n      startAt: Date(),\r\n      endAt: Date(),\r\n    };\r\n  }\r\n\r\n  changePickerData(target, value) {\r\n    this.setState({\r\n      [target]: value,\r\n    });\r\n  }\r\n\r\n  updateImages = (newImages) => {\r\n    this.setState({\r\n      imgFiles: newImages,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const API_KEY = process.env.REACT_APP_KAKAO_API_KEY;\r\n    let {\r\n      title,\r\n      contents,\r\n      price,\r\n      address1,\r\n      address2,\r\n      lat,\r\n      lon,\r\n      imgFiles,\r\n      startAt,\r\n      endAt,\r\n    } = this.state;\r\n\r\n    const takeAddress = (takeAddress) => {\r\n      this.setState({\r\n        address1: takeAddress,\r\n      });\r\n      getLatLon();\r\n    };\r\n\r\n    const getLatLon = () => {\r\n      const mapScript = document.createElement(\"script\");\r\n      mapScript.async = true;\r\n      mapScript.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${API_KEY}&autoload=false&libraries=services`;\r\n      document.head.appendChild(mapScript);\r\n      mapScript.onload = () => {\r\n        kakao.maps.load(() => {\r\n          // 카카오 맵이 로딩이 다 되면\r\n          // 주소-좌표 변환 객체를 생성합니다\r\n          const geocoder = new kakao.maps.services.Geocoder();\r\n          geocoder.addressSearch(this.state.address1, function (result, status) {\r\n            // 정상적으로 검색이 완료됐으면\r\n            if (status === kakao.maps.services.Status.OK) {\r\n              let lat = Number(result[0].y); // 위도\r\n              let lon = Number(result[0].x); // 경도\r\n              lonlatstate(lat, lon);\r\n            }\r\n          });\r\n        });\r\n      };\r\n      return <></>;\r\n    };\r\n\r\n    const lonlatstate = (klat, klon) => {\r\n      this.setState({\r\n        lat: klat,\r\n        lon: klon,\r\n      });\r\n    };\r\n\r\n    return (\r\n      <MuiPickersUtilsProvider utils={MomentUtils}>\r\n        <div className=\"writeform10\">\r\n          <img alt=\"글쓰기\" className=\"nomargin\" src=\"writecat.png\" width=\"80px\"></img>\r\n          <div className=\"writeformgruop1\">\r\n          <div className=\"writetitle\">제목\r\n          <input\r\n            placeholder=\"의뢰 제목을 입력해주세요\"\r\n            className=\"writetitleinput2\"\r\n            onChange={(e) => this.setState({ title: e.target.value })}\r\n          ></input>\r\n          </div>\r\n          <div className=\"writecontent\">내용\r\n          <textarea\r\n          placeholder=\"의뢰 내용을 적어주세요\"\r\n            className=\"writecontentinput2\"\r\n            onChange={(e) => this.setState({ contents: e.target.value })}\r\n          ></textarea>\r\n          </div>\r\n          <div className=\"writecontent\">비용\r\n          <input\r\n          placeholder=\"의뢰 비용을 숫자로 입력해주세요\"\r\n            className=\"writetitleinput2\"\r\n            onChange={(e) => this.setState({ price: Number(e.target.value) })}\r\n          ></input>\r\n          </div>\r\n          <div className=\"writecontent\">주소\r\n          <input\r\n            className=\"writetitleinput2\"\r\n            value={address1}\r\n            readOnly\r\n            type=\"text\"\r\n            placeholder=\"우편번호 찾기를 이용해주세요\"\r\n            onChange={(e) => this.setState({ address1: e.target.value })}\r\n          ></input>\r\n          <AddressModal refreshFunction={takeAddress.bind(this)} />\r\n          </div>\r\n          <div className=\"writecontent\">상세\r\n          <input\r\n          placeholder=\"의뢰 지역의 자세한 위치를 안내해주세요\"\r\n            className=\"writetitleinput2\"\r\n            onChange={(e) => this.setState({ address2: e.target.value })}\r\n          ></input>\r\n          </div>\r\n          </div>\r\n          {/* DropZone */}\r\n          <div className=\"writecontent\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;파일 첨부\r\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          미리보기</div>\r\n          <div className=\"fileuploader\">\r\n          <FileUpload refreshFunction={this.updateImages.bind(this)} />\r\n          </div>\r\n          <div className=\"writeformgruop2\">\r\n          </div>\r\n          <div className=\"startday\">\r\n            <KeyboardDateTimePicker\r\n              disableToolbar\r\n              value={this.state.startAt}\r\n              onChange={this.changePickerData.bind(this, \"startAt\")}\r\n              format=\"yyyy/MM/DD LT\"\r\n              label=\"시작 예정일\"\r\n              KeyboardButtonProps={{ \"aria-label\": \"change time\" }}\r\n            />\r\n          </div>\r\n          <div className=\"endday\">\r\n            <KeyboardDateTimePicker\r\n              disableToolbar\r\n              value={this.state.endAt}\r\n              onChange={this.changePickerData.bind(this, \"endAt\")}\r\n              format=\"yyyy/MM/DD LT\"\r\n              label=\"종료 예정일\"\r\n              KeyboardButtonProps={{ \"aria-label\": \"change time\" }}\r\n            />\r\n          </div>\r\n          <form>\r\n            <Link to={\"/\"}>\r\n              <Mutation\r\n                mutation={BOARD_UPROAD_MUTATION}\r\n                variables={{\r\n                  title,\r\n                  contents,\r\n                  price,\r\n                  address1,\r\n                  address2,\r\n                  lat,\r\n                  lon,\r\n                  imgFiles,\r\n                  startAt,\r\n                  endAt,\r\n                }}\r\n              >\r\n                {(mutation) => (\r\n                  <input className=\"writesubmit\" onClick={mutation} value=\"제출\" readOnly></input>\r\n                )}\r\n              </Mutation>\r\n            </Link>\r\n            <input\r\n              type=\"reset\"\r\n              className=\"writereset\"\r\n              onClick={this.reload}\r\n              readOnly\r\n              value=\"초기화\"\r\n            ></input>\r\n          </form>\r\n        </div>\r\n      </MuiPickersUtilsProvider>\r\n    );\r\n  }\r\n\r\n  reload() {\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nexport default BoardWrite;\r\n","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport BoardWrite from \"./BoardWrite\"\r\nimport Aside from \"../basics/Aside\"\r\nimport Footer from \"../basics/Footer\"\r\n\r\n\r\n\r\nclass IndexWrite extends Component {\r\n  render() {\r\n    return (\r\n    <>\r\n      <Route component={BoardWrite} />\r\n      <Aside />\r\n      <Footer />\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default IndexWrite","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport IndexWrite from \"../components/board/IndexWrite\";\r\nimport \"../css/reset.css\";\r\nimport \"../css/main.css\";\r\n\r\n\r\nclass Write extends Component {\r\n  render() {\r\n    return (\r\n      <Route component={IndexWrite} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Write","import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { withRouter } from \"react-router\";\r\nimport { AUTH_TOKEN } from '../../constants'\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst USER_DATA_QUERY = gql`\r\n  query {\r\n    me {\r\n      id\r\n      email\r\n      userName\r\n      nickName\r\n    }\r\n  }\r\n`;\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    const authToken = localStorage.getItem(AUTH_TOKEN)\r\n    return (\r\n      <>\r\n        <Query query={USER_DATA_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                </>\r\n              );\r\n            if (error){\r\n              return(\r\n              <>\r\n                <header>\r\n                  <nav>\r\n                  <div className=\"helpcatlogomain\">\r\n                    <Link to={{pathname:\"/\"}}><img className=\"logopng\" alt=\"Home\" src=\"/logo.png\" title=\"로고이미지\"/></Link>\r\n                  </div>\r\n                    <li>\r\n                      <div className=\"\">\r\n                        {authToken ? (\r\n                        <>\r\n                          <ul\r\n                            onClick={() => {\r\n                              localStorage.removeItem(AUTH_TOKEN);\r\n                              window.location.href=\"/\";\r\n                            }}\r\n                          >\r\n                            <span className=\"loginpng2\">로그아웃</span>\r\n                          </ul>\r\n\r\n                        </>\r\n                        ) : (\r\n                          <Link to=\"/login\">\r\n                            <span className=\"loginpng4\">로그인</span>\r\n                          </Link>\r\n                        )}\r\n                      </div>\r\n                    </li>\r\n                  </nav>\r\n                </header>\r\n              </>\r\n              )\r\n              }\r\n            if(data){\r\n              return(\r\n              <header>\r\n                <nav>\r\n                <div className=\"helpcatlogomain\">\r\n                  <Link to={{pathname:\"/\"}}><img className=\"logopng\" alt=\"Home\" src=\"logo.png\"/></Link>\r\n                </div>\r\n                  <li>\r\n                    <div className=\"\">\r\n                      {authToken ? (\r\n                      <>\r\n                        <div className=\"welcome\">환영합니다 <span className=\"welcomenick\">{data.me.nickName}</span>님</div>\r\n                        <ul\r\n                          onClick={() => {\r\n                            localStorage.removeItem(AUTH_TOKEN);\r\n                            window.location.href=\"/\";\r\n                          }}\r\n                        >\r\n                          <span className=\"loginpng2\">로그아웃</span>\r\n                        </ul>\r\n                      </>\r\n                      ) : (\r\n                        <Link to=\"/login\">\r\n                          <span className=\"loginpng4\">로그인</span>\r\n                        </Link>\r\n                      )}\r\n                    </div>\r\n                  </li>\r\n                </nav>\r\n              </header>\r\n              )\r\n            }\r\n          }}\r\n        </Query>\r\n      </>\r\n    )\r\n  }\r\n  _userDelete = async => {\r\n    localStorage.removeItem(AUTH_TOKEN);\r\n    window.location=\"/\"\r\n  };\r\n}\r\n\r\nexport default withRouter(Header);","import React, { Component } from \"react\";\r\nimport { AUTH_TOKEN } from \"../../constants\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst EMAIL_CHECK_MUTATION = gql`\r\n  mutation EmailCheckMutation($validateEmailToken: String!) {\r\n    validateEmail(validateEmailToken: $validateEmailToken) {\r\n      token\r\n      user{\r\n        id\r\n        email\r\n      }\r\n    }\r\n  }\r\n  `;\r\n\r\nclass ValidateEmail extends Component {\r\n  state = {\r\n    validateEmailToken: \"\",\r\n  };\r\n\r\n  getParameterByName(name) {\r\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\r\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\r\n      results = regex.exec(window.location.search);\r\n    return results == null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\r\n  }\r\n\r\n  render() {\r\n    const validateEmailToken = this.getParameterByName(\"validateEmailToken\")\r\n    return (\r\n      <>              <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div>성공적으로 인증 되었습니다.!</div>\r\n        <Mutation\r\n          mutation={EMAIL_CHECK_MUTATION}\r\n          variables={{validateEmailToken }}\r\n          onCompleted={(data) => this._confirm(data)}\r\n        >\r\n          {(mutation) => (\r\n            <button className=\"signButton\" onClick={mutation}>\r\n              <br></br>\r\n              확인\r\n            </button>\r\n          )}\r\n        </Mutation>\r\n      </>\r\n    );\r\n  }\r\n\r\n  _confirm = async data => {\r\n    const token = data.validateEmail.token\r\n    console.log(token)\r\n      this._saveUserData(token)\r\n      this.props.history.push(`/`)\r\n  };\r\n\r\n  _saveUserData = (token) => {\r\n    localStorage.setItem(AUTH_TOKEN, token);\r\n  };\r\n}\r\n\r\nexport default ValidateEmail;","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport Moment from \"react-moment\";\r\n\r\nconst BOARD_DETAIL_QUERY = gql`\r\n  query detailService($serviceId: Int!) {\r\n    detailService(serviceId: $serviceId) {\r\n      service {\r\n        id\r\n        title\r\n        contents\r\n        price\r\n        address1\r\n        address2\r\n        lat\r\n        lon\r\n        startAt\r\n        endAt\r\n        progress\r\n        reqUser {\r\n          id\r\n          userName\r\n          nickName\r\n        }\r\n        ansUser {\r\n          id\r\n          userName\r\n          nickName\r\n        }\r\n        serviceimgfiles {\r\n          id\r\n          imglink\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst USER_DATA_QUERY = gql`\r\n  query {\r\n    me {\r\n      id\r\n      email\r\n      userName\r\n      address1\r\n      address2\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_SERVICE_BOARD_MUTATION = gql`\r\n  mutation DeleteServiceBoardMutation($serviceId: Int!) {\r\n    removeService(id: $serviceId)\r\n  }\r\n`;\r\n\r\nconst SERVICE_ACCEPT_MUTATION = gql`\r\n  mutation ServiceAcceptMutation($serviceId: Int!) {\r\n    giveService(id: $serviceId) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nclass BoardDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      requester: \"\",\r\n      acceptor: \"\",\r\n      requesterTrue: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const paramsId = Number(this.props.match.params.id);\r\n    return (\r\n      <>\r\n        <Query\r\n          query={BOARD_DETAIL_QUERY}\r\n          variables={{\r\n            serviceId: paramsId,\r\n          }}\r\n        >\r\n          {({ loading, error, data }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                  <div className=\"map2\">Loading...</div>\r\n                </>\r\n              );\r\n            if (error)\r\n              return <></>;\r\n            const serviceBoardData = data.detailService.service; //게시글 전체 값\r\n            const serviceId = Number(serviceBoardData.id);\r\n            const startAt = new Date(serviceBoardData.startAt);\r\n            const endAt = new Date(serviceBoardData.endAt);\r\n            const { serviceimgfiles } = serviceBoardData;\r\n            this.state.requester = serviceBoardData.reqUser.id;\r\n            return (\r\n              <>\r\n                <Query query={USER_DATA_QUERY}>\r\n                  {({ loading, error, data }) => {\r\n                    if (loading)\r\n                      return (\r\n                        <>\r\n                          <div className=\"map2\">Loading...</div>\r\n                        </>\r\n                      );\r\n                    if (error)\r\n                      //비 로그인시\r\n                      return (\r\n                        <>\r\n                          <div className=\"writeform33\">\r\n                            <img\r\n                              alt=\"\"\r\n                              className=\"nomargin\"\r\n                              src=\"/boardcat.png\"\r\n                              width=\"80px\"\r\n                            ></img>\r\n                            <div className=\"nolog-title2\">제목</div>\r\n                            <input\r\n                              className=\"writetitleinput\"\r\n                              value={serviceBoardData.title}\r\n                              readOnly\r\n                            ></input>\r\n                            <br></br>\r\n                            <div className=\"nolog-title\">내용</div>\r\n                            <textarea\r\n                              className=\"writecontentinput\"\r\n                              value={serviceBoardData.contents}\r\n                              readOnly\r\n                            ></textarea>\r\n                            <div className=\"imgbox\">\r\n                              {serviceimgfiles.map((data, i) => {\r\n                                return (\r\n                                  <img\r\n                                    className=\"detailimg\"\r\n                                    key={i}\r\n                                    alt=\"게시글 사진\"\r\n                                    src={data.imglink}\r\n                                  />\r\n                                );\r\n                              })}\r\n                            </div>\r\n                            <br></br>\r\n                            <div className=\"nolog-title\">가격</div>\r\n                            <input\r\n                              className=\"writetitleinput\"\r\n                              value={serviceBoardData.price}\r\n                              readOnly\r\n                            ></input>\r\n                            <br></br>\r\n                            <div className=\"nolog-title\">주소</div>\r\n                            <input\r\n                              className=\"writetitleinput\"\r\n                              value={\r\n                                serviceBoardData.address1 +\r\n                                \", \" +\r\n                                serviceBoardData.address2\r\n                              }\r\n                              readOnly\r\n                            ></input>\r\n                            <br></br>\r\n                            <div className=\"nolog-title\">시작일&nbsp;</div>\r\n                            <Moment format=\"YYYY년&nbsp;MM월&nbsp;DD일&nbsp;hh시&nbsp;mm분\">\r\n                              {startAt}\r\n                            </Moment>\r\n                            <div className=\"nolog-title\">종료일&nbsp;</div>\r\n                            <Moment format=\"YYYY년&nbsp;MM월&nbsp;DD일&nbsp;hh시&nbsp;mm분\">\r\n                              {endAt}\r\n                            </Moment>\r\n                            <input\r\n                              className=\"writereset2\"\r\n                              type=\"reset\"\r\n                              value=\"뒤로가기\"\r\n                              readOnly\r\n                              onClick={this.Goback}\r\n                            ></input>\r\n                          </div>\r\n                        </>\r\n                      );\r\n                    // 게시글 작성자 id와 로그인된 id값이 일치할 경우 true\r\n                    if (data) {\r\n                      this.state.me = data.me.id;\r\n                      if (this.state.requester === this.state.me) {\r\n                        this.state.requesterTrue = true;\r\n                      }\r\n                    }\r\n                    //로그인 시\r\n                    return (\r\n                      <>\r\n                        <div className=\"writeform33\">\r\n                          <img\r\n                            alt=\"\"\r\n                            className=\"nomargin\"\r\n                            src=\"/boardcat.png\"\r\n                            width=\"80px\"\r\n                          ></img>\r\n                          <div className=\"nolog-title2\">제목</div>\r\n                          <input\r\n                            className=\"writetitleinput\"\r\n                            value={serviceBoardData.title}\r\n                            readOnly\r\n                          ></input>\r\n                          <br></br>\r\n                          <div className=\"nolog-title\">내용</div>\r\n                          <textarea\r\n                            className=\"writecontentinput\"\r\n                            value={serviceBoardData.contents}\r\n                            readOnly\r\n                          ></textarea>\r\n                          <br></br>\r\n                          <div className=\"imgbox\">\r\n                            {serviceimgfiles.map((data, i) => {\r\n                              return (\r\n                                <img\r\n                                  className=\"detailimg\"\r\n                                  key={i}\r\n                                  alt=\"게시글 사진\"\r\n                                  src={data.imglink}\r\n                                />\r\n                              );\r\n                            })}\r\n                          </div>\r\n                          <div className=\"nolog-title\">가격</div>\r\n                          <input\r\n                            className=\"writetitleinput\"\r\n                            value={serviceBoardData.price}\r\n                            readOnly\r\n                          ></input>\r\n                          <br></br>\r\n                          <div className=\"nolog-title\">주소</div>\r\n                          <input\r\n                            className=\"writetitleinput\"\r\n                            value={\r\n                              serviceBoardData.address1 +\r\n                              \", \" +\r\n                              serviceBoardData.address2\r\n                            }\r\n                            readOnly\r\n                          ></input>\r\n                          <br></br>\r\n                          <div className=\"nolog-title\">시작일 </div>\r\n                          <Moment format=\"YY년 MM월 DD일 hh시 mm분\">\r\n                            {startAt}\r\n                          </Moment>\r\n                          <div className=\"nolog-title\">종료일 </div>\r\n                          <Moment format=\"YY년 MM월 DD일 hh시 mm분\">\r\n                            {endAt}\r\n                          </Moment>\r\n                          <input\r\n                            className=\"writereset3\"\r\n                            type=\"reset\"\r\n                            value=\"뒤로가기\"\r\n                            readOnly\r\n                            onClick={this.Goback}\r\n                          ></input>\r\n                          {serviceBoardData.progress ? ( //서비스가 완료 되었으면 아무버튼 안뜨게\r\n                            <></>\r\n                          ) : serviceBoardData.ansUser ? ( // 서비스 수락자가 있다면\r\n                            this.state.requesterTrue ? ( // 서비스 수락자가 있고 글쓴이라면\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `/reviewWrite`,\r\n                                  serviceBoardData: serviceBoardData,\r\n                                  serviceBoardId: serviceId,\r\n                                  userData: data,\r\n                                }}\r\n                              >\r\n                                <button className=\"writereset\">거래완료</button>\r\n                              </Link>\r\n                            ) : (\r\n                              <></>\r\n                            ) //서비스 수락자가 있고 글쓴이가 아니라면 아무 버튼없음\r\n                          ) : this.state.requesterTrue ? ( //서비스 수락자가 없고 글쓴이라면\r\n                            <>\r\n                              <a href=\"/board\">\r\n                                <Mutation\r\n                                  mutation={DELETE_SERVICE_BOARD_MUTATION}\r\n                                  variables={{ serviceId }}\r\n                                >\r\n                                  {(mutation) => (\r\n                                    <button\r\n                                      className=\"writereset\"\r\n                                      onClick={mutation}\r\n                                    >\r\n                                      삭제하기\r\n                                    </button>\r\n                                  )}\r\n                                </Mutation>\r\n                              </a>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `/board/update/${serviceId}`,\r\n                                  serviceBoardData: serviceBoardData,\r\n                                }}\r\n                              >\r\n                                <input\r\n                                  className=\"writereset\"\r\n                                  type=\"reset\"\r\n                                  value=\"수정하기\"\r\n                                  readOnly\r\n                                ></input>\r\n                              </Link>\r\n                            </>\r\n                          ) : (\r\n                            // 서비스 수락자가 없고 글쓴이가 아니라면\r\n                            <>\r\n                              <a href=\"/board\">\r\n                                <Mutation\r\n                                  mutation={SERVICE_ACCEPT_MUTATION}\r\n                                  variables={{ serviceId }}\r\n                                >\r\n                                  {(mutation) => (\r\n                                    <button\r\n                                      className=\"writereset\"\r\n                                      onClick={mutation}\r\n                                    >\r\n                                      신청하기\r\n                                    </button>\r\n                                  )}\r\n                                </Mutation>\r\n                              </a>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    );\r\n                  }}\r\n                </Query>\r\n              </>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n  Goback() {\r\n    window.history.go(-1);\r\n  }\r\n}\r\n\r\nexport default BoardDetail;\r\n","import React, { useState } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { CloudDownloadOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction FileReUpload(props) {\r\n  const [Images, setImages] = useState(\r\n    props.imgLinks.map((data, i)=>(data.imglink))\r\n  );\r\n  const dropHandler = (files) => {\r\n    let formData = new FormData();\r\n    const config = {\r\n      header: { \"content-type\": \"multipart/form-data\" },\r\n    };\r\n    formData.append(\"imgFile\", files[0]);\r\n    axios.post(\"http://localhost:4000/api/upload\", formData, config).then((response) => {\r\n      if (response.data.location) {\r\n        let newimage = response.data.location; //새로 들어오는 이미지 링크\r\n        console.log(newimage)\r\n        setImages([...Images, newimage]);\r\n        props.refreshFunction([...Images, newimage],undefined ,newimage);\r\n      } else {\r\n        alert(\"파일을 저장하는 데에 실패했습니다.\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteHandler = (image) => {\r\n    const currentIndex = Images.indexOf(image);\r\n    let newImages = [...Images];\r\n    let removeImages = Images[currentIndex]\r\n    newImages.splice(currentIndex, 1);\r\n    setImages(newImages);\r\n    props.refreshFunction(newImages, removeImages, undefined);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n      <Dropzone onDrop={dropHandler}>\r\n        {({ getRootProps, getInputProps }) => (\r\n          <div\r\n            style={{\r\n              width: 300,\r\n              height: 240,\r\n              border: \"1px solid lightgray\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n            {...getRootProps()}\r\n          >\r\n            <input {...getInputProps()} />\r\n            <CloudDownloadOutlined />\r\n          </div>\r\n        )}\r\n      </Dropzone>\r\n\r\n      <div style={{ display: \"flex\", width: \"350px\", height: \"257px\", overflowX: \"scroll\" }}>\r\n        {Images.map((image, index) => (\r\n          <div onClick={() => deleteHandler(image)} key={index}>\r\n            <img alt=\"reUploadImages\" style={{ minWidth: \"300px\", width: \"300px\", height: \"240px\" }} src={`${image}`} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileReUpload;\r\n","/*global kakao*/\r\nimport React, { Component } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport FileReUpload from \"./FileReUpload\";\r\nimport AddressModal from \"../utils/daumPostcode\";\r\n\r\n\r\nconst BOARD_UPDATE_MUTATION = gql`\r\n  mutation BoardUpdateMutation(\r\n    $id: Int!\r\n    $title: String!\r\n    $contents: String!\r\n    $price: Int!\r\n    $address1: String\r\n    $address2: String\r\n    $lat: Float\r\n    $lon: Float\r\n    $addImgs: [String!]\r\n    $removeImgs: [String!]\r\n    $startAt: DateTime\r\n    $endAt: DateTime\r\n  ) {\r\n    editService(\r\n      id: $id\r\n      title: $title\r\n      contents: $contents\r\n      price: $price\r\n      address1: $address1\r\n      address2: $address2\r\n      lat: $lat\r\n      lon: $lon\r\n      addImgs: $addImgs\r\n      removeImgs: $removeImgs\r\n      startAt: $startAt\r\n      endAt: $endAt\r\n    )\r\n  }\r\n`;\r\n\r\nclass BoardUpdate extends Component {\r\n  state = {\r\n    title: this.props.location.serviceBoardData.title,\r\n    contents: \"\",\r\n    price: Number,\r\n    address1: \"\",\r\n    address2: \"\",\r\n    lat: Number,\r\n    lon: Number,\r\n    imgFiles: [],\r\n    addImgs:[],\r\n    removeImgs:[],\r\n    startAt: Date(),\r\n    endAt: Date(),\r\n  };\r\n\r\n  changePickerData(target, value) {\r\n    this.setState({\r\n      [target]: value,\r\n    });\r\n  }\r\n\r\n  updateImages = (newImages, removeImages, newImage) => {\r\n    if(removeImages === undefined){\r\n      let newimg = this.state.addImgs //기존의 새로들어온 이미지 담고있는 배열 잠시 저장\r\n      if(newimg[0] === undefined){\r\n        this.setState({\r\n          imgFiles: newImages,\r\n          addImgs: [newImage]\r\n        });\r\n      }else{\r\n        this.setState({\r\n          imgFiles: newImages,\r\n          addImgs: [newImage, ...newimg],\r\n        });\r\n      }\r\n    }else{\r\n      let rmimg = this.state.removeImgs //기존의 삭제할 이미지 담고있는 배열 잠시 저장\r\n      if(rmimg[0] === undefined){\r\n        this.setState({\r\n          imgFiles: newImages,\r\n          removeImgs: [removeImages],\r\n        });\r\n      }else{\r\n        this.setState({\r\n          imgFiles: newImages,\r\n          removeImgs: [removeImages, ...rmimg],\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const API_KEY = process.env.REACT_APP_KAKAO_API_KEY;\r\n    const beforeData = this.props.location.serviceBoardData;\r\n    const { title, contents, price, address1, address2, imgFiles, addImgs, removeImgs, startAt, endAt, lat, lon } = this.state;\r\n    const id = Number(beforeData.id);\r\n\r\n    const takeAddress = (takeAddress) => {\r\n      this.setState({\r\n        address1: takeAddress,\r\n      });\r\n      getLatLon();\r\n    };\r\n\r\n    const getLatLon = () => {\r\n      const mapScript = document.createElement(\"script\");\r\n      mapScript.async = true;\r\n      mapScript.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${API_KEY}&autoload=false&libraries=services`;\r\n      document.head.appendChild(mapScript);\r\n      mapScript.onload = () => {\r\n        kakao.maps.load(() => {\r\n          // 카카오 맵이 로딩이 다 되면\r\n          // 주소-좌표 변환 객체를 생성합니다\r\n          const geocoder = new kakao.maps.services.Geocoder();\r\n          geocoder.addressSearch(this.state.address1, function (result, status) {\r\n            // 정상적으로 검색이 완료됐으면\r\n            if (status === kakao.maps.services.Status.OK) {\r\n              let lat = Number(result[0].y); // 위도\r\n              let lon = Number(result[0].x); // 경도\r\n              lonlatstate(lat, lon);\r\n            }\r\n          });\r\n        });\r\n      };\r\n      return <></>;\r\n    };\r\n\r\n    const lonlatstate = (klat, klon) => {\r\n      this.setState({\r\n        lat: klat,\r\n        lon: klon,\r\n      });\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <MuiPickersUtilsProvider utils={MomentUtils}>\r\n          <div className=\"writeform\">\r\n            <div className=\"writetitle\">제목</div>\r\n            <input\r\n              className=\"writetitleinput\"\r\n              placeholder={beforeData.title}\r\n              onChange={(e) => this.setState({ title: e.target.value })}\r\n            ></input>\r\n            <div className=\"writecontent\">내용</div>\r\n            <textarea\r\n              className=\"writecontentinput\"\r\n              placeholder={beforeData.contents}\r\n              onChange={(e) => this.setState({ contents: e.target.value })}\r\n            ></textarea>\r\n            <div className=\"writecontent\">가격</div>\r\n            <input\r\n              className=\"writetitleinput\"\r\n              placeholder={beforeData.price}\r\n              onChange={(e) => this.setState({ price: Number(e.target.value) })}\r\n            ></input>\r\n            <div className=\"writecontent\">도로명주소</div>\r\n            <input\r\n              className=\"writetitleinput\"\r\n              value={address1}\r\n              readOnly\r\n              type=\"text\"\r\n              placeholder={beforeData.address1}\r\n              onChange={(e) => this.setState({ address1: e.target.value })}\r\n            ></input>\r\n            <AddressModal refreshFunction={takeAddress.bind(this)} />\r\n            <div className=\"writecontent\">상세주소</div>\r\n            <input\r\n              className=\"writetitleinput\"\r\n              placeholder={beforeData.address2}\r\n              onChange={(e) => this.setState({ address2: e.target.value })}\r\n            ></input>\r\n            <FileReUpload\r\n              imgLinks={beforeData.serviceimgfiles}\r\n              refreshFunction={this.updateImages.bind(this)}\r\n            />\r\n            <KeyboardDateTimePicker\r\n              disableToolbar\r\n              value={startAt ? startAt : beforeData.startAt}\r\n              onChange={this.changePickerData.bind(this, \"startAt\")}\r\n              variant=\"inline\"\r\n              format=\"yyyy/MM/DD LT\"\r\n              margin=\"normal\"\r\n              label=\"시작 예정일\"\r\n              style={{ width: \"50%\" }}\r\n              KeyboardButtonProps={{ \"aria-label\": \"change time\" }}\r\n            />\r\n            <KeyboardDateTimePicker\r\n              disableToolbar\r\n              value={endAt ? endAt : beforeData.endAt}\r\n              onChange={this.changePickerData.bind(this, \"endAt\")}\r\n              variant=\"inline\"\r\n              format=\"yyyy/MM/DD LT\"\r\n              margin=\"normal\"\r\n              label=\"종료 예정일\"\r\n              style={{ width: \"50%\" }}\r\n              KeyboardButtonProps={{ \"aria-label\": \"change time\" }}\r\n            />\r\n            <form>\r\n              <a href=\"/board\">\r\n                <Mutation\r\n                  mutation={BOARD_UPDATE_MUTATION}\r\n                  variables={{\r\n                    id,\r\n                    title,\r\n                    contents,\r\n                    price,\r\n                    address1,\r\n                    address2,\r\n                    lat,\r\n                    lon,\r\n                    addImgs,\r\n                    removeImgs,\r\n                    startAt,\r\n                    endAt,\r\n                  }}\r\n                >\r\n                  {(mutation) => (\r\n                    <input className=\"writesubmit\" onClick={mutation} value=\"제출\" readOnly></input>\r\n                  )}\r\n                </Mutation>\r\n              </a>\r\n              <input className=\"writereset\" type=\"reset\"></input>\r\n            </form>\r\n          </div>\r\n        </MuiPickersUtilsProvider>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardUpdate;\r\n","import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass UserInforList extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <ul className=\"UserInformation-ul\">의뢰 게시글<br/>\r\n          <Link to={{pathname:\"/userInfor\"}}>\r\n            <li className=\"UserInformation-li\">진행 중</li><br/>\r\n          </Link>\r\n          <Link to={{pathname:\"/userInfor/reqComplete\"}}>\r\n            <li className=\"UserInformation-li\">완료 게시글</li><br/>\r\n          </Link>\r\n        </ul>\r\n        <ul className=\"UserInformation-ul\">수락 게시글 <br/>\r\n          <Link to={{pathname:\"/userInfor/accept\"}}>\r\n            <li className=\"UserInformation-li\">진행 중</li><br/>\r\n          </Link>\r\n          <Link to={{pathname:\"/userInfor/accComplete\"}}>\r\n            <li className=\"UserInformation-li\">완료 게시글</li><br/>\r\n          </Link>\r\n        </ul>\r\n        <ul className=\"UserInformation-ul\">회원정보<br/>\r\n          <Link to={{pathname:\"/userInfor/pwdEdit\"}}>\r\n            <li className=\"UserInformation-li\">비밀번호 수정</li><br/>\r\n          </Link>\r\n          <Link to={{pathname:\"/userInfor/userEdit\"}}>\r\n            <li className=\"UserInformation-li\">정보 수정</li><br/>\r\n          </Link>\r\n          <Link to={{pathname:\"/userInfor/userWithdrawal\"}}>\r\n            <li className=\"UserInformation-li\">회원 탈퇴</li><br/>\r\n          </Link>\r\n        </ul>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default UserInforList","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass UserBoardArticle extends Component {\r\n  render() {\r\n    const serviceBoardData = this.props.serviceBoardData;\r\n    return (\r\n      <>\r\n        <Link\r\n          to={{\r\n            pathname: `/board/${serviceBoardData.id}`,\r\n            serviceBoardData: serviceBoardData,\r\n          }}\r\n        >\r\n          <article\r\n            className={\r\n              serviceBoardData.progress\r\n                ? \"articleUBA3\"\r\n                : serviceBoardData.ansUser\r\n                ? \"articleUBA1\"\r\n                : \"articleUBA2\"\r\n            }\r\n          >\r\n            {serviceBoardData.progress ? (\r\n              <h1 className=\"colorblue2\">심부름 완료</h1>\r\n            ) : serviceBoardData.ansUser ? (\r\n              <h1 className=\"colorblue2\">진행중</h1>\r\n            ) : (\r\n              <h1 className=\"colorblue2\">모집중</h1>\r\n            )}\r\n            <span className=\"colorblue\">제목</span> : {serviceBoardData.title}\r\n            <br />\r\n            <span className=\"colorblue\">내용</span> : {serviceBoardData.contents}\r\n            <br />\r\n            <span className=\"colorblue\">가격</span> : {serviceBoardData.price}\r\n            <br />\r\n            <span className=\"colorblue\">주소</span> : {serviceBoardData.address1}, {serviceBoardData.address2}\r\n            <br />\r\n            <span className=\"colorblue\">시작일</span> : {serviceBoardData.startAt}\r\n            <br />\r\n            <span className=\"colorblue\">종료일</span> : {serviceBoardData.endAt}\r\n            <br />\r\n            <span className=\"colorblue\">닉네임</span>: {serviceBoardData.reqUser.nickName}\r\n          </article>\r\n        </Link>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserBoardArticle;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorUrlPage extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"login\">\r\n          <div className=\"loginform\">\r\n              정상적인 경로가 아니다냥 ㅇㅅㅇㄱ\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorUrlPage;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport UserBoardArticle from \"./UserBoardArticle\";\r\nimport ErrorUrlPage from \"../basics/ErrorUrlPage\";\r\n\r\n\r\nconst VIEW_SERVICES_BOARD_QUERY = gql`\r\n  query {\r\n    showServices(orderBy: desc) {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_SERVICE_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newService {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass UserRequest extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      address1: \"\",\r\n      address2: \"\",\r\n      ansUser: \"\",\r\n      contents: \"\",\r\n      endAt: \"\",\r\n      id: Number,\r\n      price: Number,\r\n      reqUser: \"\",\r\n      startAt: \"\",\r\n      title: \"\",\r\n    };\r\n  }\r\n\r\n  _subscribeToNewLinks = (subscribeToMore) => {\r\n    subscribeToMore({\r\n      document: NEW_SERVICE_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const newServiceData = subscriptionData.data.newService;\r\n        const exists = prev.showServices.find(\r\n          ({ id }) => id === newServiceData.id\r\n        );\r\n        if (exists) return prev;\r\n\r\n        return Object.assign({}, prev, {\r\n          showServices: [newServiceData, ...prev.showServices],\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const mapToComponent = (data) => {\r\n      if (data[0]) {\r\n        return data.map((serviceBoardData, i) => {\r\n          if(serviceBoardData.ansUser){\r\n            if(this.props.me.me.id === serviceBoardData.ansUser.id){//유저 아이디와 게시글 올린이 아이디 일치하는지\r\n              if(serviceBoardData.progress){\r\n                return (\r\n                  <>\r\n                  <UserBoardArticle\r\n                    key={i}\r\n                    serviceBoardData={serviceBoardData}\r\n                  />\r\n                  </>\r\n                );\r\n              }\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        return <div>등록된 게시글이 없습니다.</div>;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Query query={VIEW_SERVICES_BOARD_QUERY}>\r\n          {({ loading, error, data, subscribeToMore }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                  <div>Loading...</div>\r\n                </>\r\n              );\r\n            if (error) return <ErrorUrlPage />;\r\n            if (data) {\r\n              this.state = data.showServices;\r\n            }\r\n            this._subscribeToNewLinks(subscribeToMore);\r\n            // this.state = data.serviceAll.reverse() // graphql query 셀렉트로 가져온 값\r\n            return (\r\n              <>\r\n                <div>\r\n                  <section className=\"\">\r\n                    <div className=\"\">{mapToComponent(this.state)}</div>\r\n                  </section>\r\n                </div>\r\n              </>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserRequest;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport UserBoardArticle from \"./UserBoardArticle\";\r\n\r\nconst VIEW_SERVICES_BOARD_QUERY = gql`\r\n  query {\r\n    showServices(orderBy: desc) {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_SERVICE_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newService {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass UserRequest extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      address1: \"\",\r\n      address2: \"\",\r\n      ansUser: \"\",\r\n      contents: \"\",\r\n      endAt: \"\",\r\n      id: Number,\r\n      price: Number,\r\n      reqUser: \"\",\r\n      startAt: \"\",\r\n      title: \"\",\r\n    };\r\n  }\r\n\r\n  _subscribeToNewLinks = (subscribeToMore) => {\r\n    subscribeToMore({\r\n      document: NEW_SERVICE_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        console.log(prev)\r\n        if (!subscriptionData.data) return prev;\r\n        const newServiceData = subscriptionData.data.newService;\r\n        const exists = prev.showServices.find(\r\n          ({ id }) => id === newServiceData.id\r\n        );\r\n        if (exists) return prev;\r\n\r\n        return Object.assign({}, prev, {\r\n          showServices: [newServiceData, ...prev.showServices],\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const mapToComponent = (data) => {\r\n      if (data[0]) {\r\n        return data.map((serviceBoardData, i) => {\r\n          if(serviceBoardData.ansUser){\r\n            if(this.props.me.me.id === serviceBoardData.ansUser.id){//유저 아이디와 게시글 올린이 아이디 일치하는지\r\n              if(!serviceBoardData.progress){\r\n                return (\r\n                  <>\r\n                  <UserBoardArticle\r\n                    key={i}\r\n                    serviceBoardData={serviceBoardData}\r\n                  />\r\n                  </>\r\n                );\r\n              }\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        return <div>등록된 게시글이 없습니다.</div>;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Query query={VIEW_SERVICES_BOARD_QUERY}>\r\n          {({ loading, error, data, subscribeToMore }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                  <div>Loading...</div>\r\n                </>\r\n              );\r\n            if (error) return console.log(error);\r\n            if (data) {\r\n              this.state = data.showServices;\r\n            }\r\n            this._subscribeToNewLinks(subscribeToMore);\r\n            // this.state = data.serviceAll.reverse() // graphql query 셀렉트로 가져온 값\r\n            return (\r\n              <>\r\n                <div>\r\n                  <section className=\"\">\r\n                    <div className=\"\">{mapToComponent(this.state)}</div>\r\n                  </section>\r\n                </div>\r\n              </>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserRequest;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorNotLogin extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"login\">\r\n          <div className=\"loginform\">\r\n            로그인이 필요하다 냥 ㅇㅅㅇㄱ\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorNotLogin;\r\n","/*global kakao*/\r\nimport React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport AddressModal from \"../utils/daumPostcode\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport ErrorNotLogin from \"../basics/ErrorNotLogin\";\r\n\r\nconst USER_DATA_QUERY = gql`\r\n  query {\r\n    me {\r\n      email\r\n      nickName\r\n      userName\r\n      gender\r\n      birth\r\n      address1\r\n      address2\r\n      id\r\n      userName\r\n      address1\r\n    }\r\n  }\r\n`;\r\n\r\nconst USER_EDIT_MUTATION = gql`\r\n  mutation editUser( $nickName: String! $address1: String! $address2: String! $lat: Float! $lon: Float! $phone: String!){\r\n    editUser(nickName: $nickName, address1: $address1 address2: $address2 lat: $lat lon: $lon phone: $phone)\r\n  }\r\n`\r\nclass UserEdit extends Component {\r\n  state = {\r\n    email: \"\",\r\n    emailComplete: false,\r\n    emailNotComplete: false,\r\n    emailAuthenticationValue: false, //이메일 인증코드 값\r\n    emailUserInput: null, // 이메일 인증코드 사용자 입력값\r\n    password: \"\",\r\n    userName: \"\",\r\n    nickName: \"\",\r\n    gender: \"\",\r\n    phone: \"\",\r\n    address1: \"\",\r\n    address2: \"\",\r\n    birth: \"\",\r\n    lat: Number,\r\n    lon: Number,\r\n    firstInData: false,\r\n  };\r\n  render() {\r\n    const API_KEY = process.env.REACT_APP_KAKAO_API_KEY;\r\n\r\n    const takeAddress = (takeAddress) => {\r\n      this.setState({\r\n        address1: takeAddress,\r\n      });\r\n      getLatLon();\r\n    };\r\n\r\n    const getLatLon = () => {\r\n      const mapScript = document.createElement(\"script\");\r\n      mapScript.async = true;\r\n      mapScript.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${API_KEY}&autoload=false&libraries=services`;\r\n      document.head.appendChild(mapScript);\r\n      mapScript.onload = () => {\r\n        kakao.maps.load(() => {\r\n          // 카카오 맵이 로딩이 다 되면\r\n          // 주소-좌표 변환 객체를 생성합니다\r\n          const geocoder = new kakao.maps.services.Geocoder();\r\n          geocoder.addressSearch(this.state.address1, function (result, status) {\r\n            // 정상적으로 검색이 완료됐으면\r\n            if (status === kakao.maps.services.Status.OK) {\r\n              let lat = Number(result[0].y); // 위도\r\n              let lon = Number(result[0].x); // 경도\r\n              lonlatstate(lat, lon);\r\n            }\r\n          });\r\n        });\r\n      };\r\n      return <></>;\r\n    };\r\n\r\n    const lonlatstate = (klat, klon) => {\r\n      this.setState({\r\n        lat: klat,\r\n        lon: klon,\r\n      });\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <h2>유저 정보 수정</h2>\r\n        <Query query={USER_DATA_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading){\r\n              return (\r\n                <div>Loading...\r\n                </div>\r\n              )\r\n            }\r\n            if (error){return <ErrorNotLogin />}\r\n            const myData = data\r\n            const firstInData = this.state.firstInData\r\n            if(firstInData === false){\r\n              this.state = myData.me\r\n              this.state.firstInData = true\r\n            }\r\n            const {\r\n              email,\r\n              password,\r\n              userName,\r\n              nickName,\r\n              gender,\r\n              phone,\r\n              address1,\r\n              address2,\r\n              birth,\r\n              lat,\r\n              lon,\r\n            } = this.state;\r\n            return (\r\n              <>\r\n                <div className=\"signup\">\r\n                  <form>\r\n                    <div className=\"signupform\">\r\n                      <img alt=\"회원가입\" className=\"nomargin\" src=\"signupcat.png\" width=\"80px\"></img>\r\n                      <div className=\"email\">\r\n                        <input\r\n                          className=\"signupinput1\"\r\n                          value={this.state.email}\r\n                          onChange={(e) => this.setState({ email: e.target.value })}\r\n                          type=\"text\"\r\n                          placeholder=\"인증받으실 이메일을 입력해주세요\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                  <form>\r\n                    <div className=\"signupform2\">\r\n                      <div className=\"nickName\">\r\n                        <input\r\n                          className=\"signupinput3\"\r\n                          value={nickName}\r\n                          onChange={(e) => this.setState({ nickName: e.target.value })}\r\n                          type=\"text\"\r\n                          placeholder=\"사용할 닉네임을 입력해주세요\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"userName\">\r\n                        <input\r\n                          value={userName}\r\n                          onChange={(e) => this.setState({ userName: e.target.value })}\r\n                          type=\"text\"\r\n                          placeholder=\"사용자 이름을 입력해주세요\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                  <form>\r\n                    <div className=\"signupform3\">\r\n                      <div className=\"gender\">\r\n                        <label>\r\n                          <input\r\n                            value=\"M\"\r\n                            onChange={(e) => this.setState({ gender: e.target.value })}\r\n                            type=\"radio\"\r\n                            name=\"gender\"\r\n                          />{\" \"}\r\n                          남자\r\n                        </label>\r\n                        <label>\r\n                          <input\r\n                            value=\"W\"\r\n                            onChange={(e) => this.setState({ gender: e.target.value })}\r\n                            type=\"radio\"\r\n                            name=\"gender\"\r\n                          />{\" \"}\r\n                          여자\r\n                        </label>\r\n                      </div>\r\n                      <div className=\"birth\">\r\n                        <input\r\n                          value={birth}\r\n                          onChange={(e) => this.setState({ birth: e.target.value })}\r\n                          type=\"text\"\r\n                          placeholder=\"생년월일을 -없이 입력해주세요&nbsp;&nbsp;&nbsp;&nbsp;ex)971006\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"phone\">\r\n                        <input\r\n                          value={phone}\r\n                          onChange={(e) => this.setState({ phone: e.target.value })}\r\n                          type=\"text\"\r\n                          placeholder=\"전화번호를 -없이 입력해주세요&nbsp;&nbsp;&nbsp;&nbsp;ex)01012345678\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"address\">\r\n                        <input\r\n                          value={address1}\r\n                          readOnly\r\n                          type=\"text\"\r\n                          placeholder=\"우편번호 찾기를 이용해주세요\"\r\n                        />\r\n                        <AddressModal refreshFunction={takeAddress.bind(this)} />\r\n                      </div>\r\n                      <div className=\"address\">\r\n                        <input\r\n                          value={address2}\r\n                          onChange={(e) => this.setState({ address2: e.target.value })}\r\n                          type=\"text\"\r\n                          placeholder=\"상세주소를 입력해주세요\"\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Mutation\r\n                          mutation={USER_EDIT_MUTATION}\r\n                          variables={{\r\n                            nickName,\r\n                            phone,\r\n                            address1,\r\n                            address2,\r\n                            lat,\r\n                            lon,\r\n                          }}\r\n                          onCompleted={(data) => this._confirm(data)}\r\n                        >\r\n                          {(mutation) => (\r\n                            <input className=\"submit\" onClick={mutation} readOnly value=\"수정하기\"></input>\r\n                          )}\r\n                        </Mutation>\r\n                        <input\r\n                          type=\"reset\"\r\n                          className=\"reset\"\r\n                          onClick={this.reload}\r\n                          readOnly\r\n                          value=\"초기화\"\r\n                        ></input>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </>\r\n            )\r\n          }\r\n        }\r\n        </ Query>\r\n      </>\r\n    );\r\n  }\r\n  _confirm = async (data) => {\r\n    window.alert(\"정상적으로 수정되었습니다.\")\r\n    this.props.history.push(`/userInfor`);\r\n  };\r\n}\r\n\r\nexport default UserEdit;\r\n","import React, { Component } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst USER_PASSWORD_UPDATE_MUTATION = gql`\r\n  mutation UserPasswordUpdateMutation($oldPwd: String!, $newPwd: String!) {\r\n    editPwd(oldPwd: $oldPwd, newPwd: $newPwd)\r\n  }\r\n`;\r\n\r\nclass UserPwdEdit extends Component {\r\n  state = {\r\n    oldPwd: \"\",\r\n    newPwd: \"\",\r\n  };\r\n  render() {\r\n    const { oldPwd, newPwd } = this.state;\r\n    return (\r\n      <>\r\n            <div className=\"loginInput\">\r\n              <div className=\"updatePWD\">\r\n              <img alt=\"\" className=\"nomargin\" src=\"/membercat.png\" width=\"80px\"></img>\r\n                <input\r\n                  value={oldPwd}\r\n                  onChange={(e) => this.setState({ oldPwd: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"현재 비밀번호\"\r\n                />\r\n              </div>\r\n              <div className=\"updateNewPWD\">\r\n                <input\r\n                  value={newPwd}\r\n                  onChange={(e) => this.setState({ newPwd: e.target.value })}\r\n                  type=\"password\"\r\n                  placeholder=\"새 비밀번호\"\r\n                />\r\n              </div>\r\n              <Link to=\"/\">\r\n              <Mutation\r\n                mutation={USER_PASSWORD_UPDATE_MUTATION}\r\n                variables={{ oldPwd, newPwd }}\r\n              >\r\n                {(mutation) => (\r\n                  <button className=\"pwdEditbutton\" onClick={mutation}>\r\n                    수정하기\r\n                  </button>\r\n                )}\r\n              </Mutation>\r\n              </Link>\r\n            </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default UserPwdEdit;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport UserBoardArticle from \"./UserBoardArticle\";\r\n\r\nconst VIEW_SERVICES_BOARD_QUERY = gql`\r\n  query {\r\n    showServices(orderBy: desc) {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_SERVICE_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newService {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass UserRequest extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      address1: \"\",\r\n      address2: \"\",\r\n      ansUser: \"\",\r\n      contents: \"\",\r\n      endAt: \"\",\r\n      id: Number,\r\n      price: Number,\r\n      reqUser: \"\",\r\n      startAt: \"\",\r\n      title: \"\",\r\n    };\r\n  }\r\n\r\n  _subscribeToNewLinks = (subscribeToMore) => {\r\n    subscribeToMore({\r\n      document: NEW_SERVICE_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const newServiceData = subscriptionData.data.newService;\r\n        const exists = prev.showServices.find(\r\n          ({ id }) => id === newServiceData.id\r\n        );\r\n        if (exists) return prev;\r\n\r\n        return Object.assign({}, prev, {\r\n          showServices: [newServiceData, ...prev.showServices],\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const mapToComponent = (data) => {\r\n      if (data[0]) {\r\n        return data.map((serviceBoardData, i) => {\r\n          if(this.props.me.me.id === serviceBoardData.reqUser.id){//유저 아이디와 게시글 올린이 아이디 일치하는지\r\n            if(serviceBoardData.progress){\r\n              return (\r\n                <>\r\n                <UserBoardArticle\r\n                  key={i}\r\n                  serviceBoardData={serviceBoardData}\r\n                />\r\n                </>\r\n              );\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        return <div>등록된 게시글이 없습니다.</div>;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Query query={VIEW_SERVICES_BOARD_QUERY}>\r\n          {({ loading, error, data, subscribeToMore }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                  <div>Loading...</div>\r\n                </>\r\n              );\r\n            if (error) return console.log(error);\r\n            if (data) {\r\n              this.state = data.showServices;\r\n            }\r\n            this._subscribeToNewLinks(subscribeToMore);\r\n            // this.state = data.serviceAll.reverse() // graphql query 셀렉트로 가져온 값\r\n            return (\r\n              <>\r\n                <div>\r\n                  <section className=\"\">\r\n                    <div className=\"\">{mapToComponent(this.state)}</div>\r\n                  </section>\r\n                </div>\r\n              </>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserRequest;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport UserBoardArticle from \"./UserBoardArticle\";\r\n\r\nconst VIEW_SERVICES_BOARD_QUERY = gql`\r\n  query {\r\n    showServices(orderBy: desc) {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_SERVICE_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newService {\r\n      id\r\n      title\r\n      contents\r\n      price\r\n      address1\r\n      address2\r\n      startAt\r\n      endAt\r\n      progress\r\n      reqUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n      ansUser {\r\n        id\r\n        userName\r\n        nickName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass UserRequest extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      address1: \"\",\r\n      address2: \"\",\r\n      ansUser: \"\",\r\n      contents: \"\",\r\n      endAt: \"\",\r\n      id: Number,\r\n      price: Number,\r\n      reqUser: \"\",\r\n      startAt: \"\",\r\n      title: \"\",\r\n    };\r\n  }\r\n\r\n  _subscribeToNewLinks = (subscribeToMore) => {\r\n    subscribeToMore({\r\n      document: NEW_SERVICE_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const newServiceData = subscriptionData.data.newService;\r\n        const exists = prev.showServices.find(\r\n          ({ id }) => id === newServiceData.id\r\n        );\r\n        if (exists) return prev;\r\n\r\n        return Object.assign({}, prev, {\r\n          showServices: [newServiceData, ...prev.showServices],\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const mapToComponent = (data) => {\r\n      if (data[0]) {\r\n        return data.map((serviceBoardData, i) => {\r\n          if(this.props.me.me.id === serviceBoardData.reqUser.id){//유저 아이디와 게시글 올린이 아이디 일치하는지\r\n            if(!serviceBoardData.progress){\r\n              return (\r\n                <>\r\n                <UserBoardArticle\r\n                  key={i}\r\n                  serviceBoardData={serviceBoardData}\r\n                />\r\n                </>\r\n              );\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        return <div>등록된 게시글이 없습니다.</div>;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Query query={VIEW_SERVICES_BOARD_QUERY}>\r\n          {({ loading, error, data, subscribeToMore }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                  <div>Loading...</div>\r\n                </>\r\n              );\r\n            if (error) return console.log(error);\r\n            if (data) {\r\n              this.state = data.showServices;\r\n            }\r\n            this._subscribeToNewLinks(subscribeToMore);\r\n            // this.state = data.serviceAll.reverse() // graphql query 셀렉트로 가져온 값\r\n            return (\r\n              <>\r\n                <div>\r\n                  <section className=\"\">\r\n                    <div className=\"\">{mapToComponent(this.state)}</div>\r\n                  </section>\r\n                </div>\r\n              </>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserRequest;\r\n","import React, { Component } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AUTH_TOKEN } from '../../constants'\r\n\r\nconst USER_DELETE_MUTATION = gql`\r\n  mutation {\r\n    removeUser\r\n  }\r\n`;\r\n\r\nclass UserWithdrawal extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2>회원 탈퇴</h2>\r\n        <Mutation\r\n          mutation={USER_DELETE_MUTATION}\r\n          onCompleted={(data) => this._userDelete(data)}\r\n        >\r\n          {(mutation) => (\r\n            <button className=\"pwdEditbutton\" onClick={mutation}>\r\n              회원 탈퇴하기\r\n            </button>\r\n          )}\r\n        </Mutation>\r\n      </>\r\n    );\r\n  }\r\n  _userDelete = async data => {\r\n    localStorage.removeItem(AUTH_TOKEN);\r\n    window.location=\"/\"\r\n  };\r\n}\r\n\r\nexport default UserWithdrawal;\r\n","import React, { Component } from \"react\"\r\nimport { Route, Switch } from \"react-router-dom\"\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport UserAccComplete from \"./UserAccComplete\";\r\nimport UserAccept from \"./UserAccept\";\r\nimport UserEdit from \"./UserEdit\";\r\nimport UserPwdEdit from \"./UserPwdEdit\";\r\nimport UserReqComplete from \"./UserReqComplete\";\r\nimport UserRequest from \"./UserRequest\";\r\nimport UserWithdrawal from \"./UserWithdrawal\";\r\nimport ErrorNotLogin from \"../basics/ErrorNotLogin\";\r\n\r\nconst USER_DATA_QUERY = gql`\r\n  query {\r\n    me {\r\n      id\r\n      email\r\n      userName\r\n      address1\r\n    }\r\n  }\r\n`;\r\n\r\nclass UserInforContents extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Query query={USER_DATA_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading){\r\n              return (\r\n                <div>Loading...\r\n                </div>\r\n              )\r\n            }\r\n            if (error){return <ErrorNotLogin />}\r\n            return(\r\n              <div className=\"map3\">\r\n              <Switch>\r\n                <Route path=\"/userInfor/\" exact render={() => <UserRequest me={data}/>} />\r\n                <Route path=\"/userInfor/reqComplete\" exact render={() => <UserReqComplete me={data}/>} />\r\n                <Route path=\"/userInfor/accept\" exact render={() => <UserAccept me={data}/>} />\r\n                <Route path=\"/userInfor/accComplete\" exact render={() => <UserAccComplete me={data}/>} />\r\n                <Route path=\"/userInfor/pwdEdit\" exact component={UserPwdEdit} />\r\n                <Route path=\"/userInfor/userEdit\" exact component={UserEdit} />\r\n                <Route path=\"/userInfor/userWithdrawal\" exact component={UserWithdrawal} />\r\n              </Switch>\r\n              </div>\r\n            )\r\n          }}\r\n        </Query>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default UserInforContents","import React, { Component } from \"react\"\r\nimport UserInforList from \"./UserInforList\";\r\nimport UserInforContents from './UserInforContents';\r\n\r\n\r\n\r\nclass UserInformation extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"UserInformation\">\r\n          <div className=\"UserInformation-article1\">\r\n            <UserInforList />\r\n          </div>\r\n          <div className=\"UserInformation-article2\">\r\n           <UserInforContents />\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default UserInformation","import React, { Component } from \"react\"\r\nimport Aside from \"../basics/Aside\";\r\nimport Footer from \"../basics/Footer\";\r\nimport UserInformation from \"./UserInformation\";\r\n\r\n\r\n\r\nclass IndexUsers extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <UserInformation />\r\n        <Aside />\r\n        <Footer />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default IndexUsers","import React, { Component } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst REVIEW_WRITE_MUTATION = gql`\r\n  mutation ReviewWriteMutation($serviceId: Int!, $rating: Int!, $review: String!) {\r\n    addReview(serviceId: $serviceId, rating: $rating, review: $review) {\r\n      id\r\n      rating\r\n      review\r\n    }\r\n  }\r\n`;\r\n\r\nconst FINISH_SERVICE_BOARD_MUTATION = gql`\r\n  mutation DeleteServiceBoardMutation($serviceId: Int!) {\r\n    finishService(id: $serviceId)\r\n  }\r\n`;\r\n\r\nclass ReviewWrite extends Component {\r\n  state = {\r\n    rating: Number,\r\n    review: \"\",\r\n    reviewFinish: false,\r\n  };\r\n  setReviewFinish() {\r\n    this.setState({\r\n      reviewFinish: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { rating, review } = this.state;\r\n    const serviceId = Number(this.props.location.serviceBoardData.id);\r\n    const serviceTitle = this.props.location.serviceBoardData.title;\r\n    return (\r\n      <>\r\n        <div className=\"writeform5\">\r\n          <br></br><br></br><br></br>\r\n          <div className=\"writetitle\">제목\r\n          <input\r\n            value={serviceTitle}\r\n            className=\"writetitleinput\"\r\n            readOnly\r\n          ></input></div>\r\n\r\n          <div className=\"writecontent\">후기\r\n          <textarea\r\n            placeholder=\"후기를 입력해주세요\"\r\n            className=\"writecontentinput\"\r\n            onChange={(e) => this.setState({ review: e.target.value })}\r\n          ></textarea></div>\r\n\r\n          <div className=\"writecontent\">평점\r\n          <textarea\r\n            placeholder=\"숫자로 입력해주세요\"\r\n            className=\"writecontentinput\"\r\n            onChange={(e) => this.setState({ rating: Number(e.target.value) })}\r\n          ></textarea></div>\r\n\r\n          {this.state.reviewFinish ? (\r\n            <>\r\n              <div className=\"center\"><span className=\"colorblue\">후기 작성이 완료되었습니다!</span></div>\r\n              <Mutation\r\n                mutation={FINISH_SERVICE_BOARD_MUTATION}\r\n                variables={{ serviceId }}\r\n              >\r\n                {(mutation) => (\r\n                <a href=\"/\">\r\n                  <button className=\"writereset5\" onClick={mutation}>\r\n                    심부름 완료\r\n                  </button>\r\n                </a>\r\n                )}\r\n              </Mutation>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Mutation\r\n                mutation={REVIEW_WRITE_MUTATION}\r\n                variables={{ serviceId, rating, review }}\r\n                onCompleted={() => this._confirm()}\r\n              >\r\n                {(mutation) => (\r\n                  <input\r\n                    className=\"writereset5\"\r\n                    onClick={mutation}\r\n                    readOnly\r\n                    value=\"후기 작성\"\r\n                  ></input>\r\n                )}\r\n              </Mutation>\r\n              <br></br>\r\n              <button className=\"writereset6\" onClick={this.reviewDontClear}>\r\n                거래 완료\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  reviewDontClear(){\r\n    alert(\"리뷰를 먼저 작성해주세요!\")\r\n  }\r\n\r\n  _confirm = async () => {\r\n    this.setReviewFinish();\r\n  };\r\n}\r\n\r\nexport default ReviewWrite;\r\n","import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass MessageUserDetail extends Component {\r\n  render() {\r\n    const myData = this.props.myData.me; // 로그인 된 내 정보\r\n    const opponentData = this.props.value // 개인 채팅 ROOM 정보\r\n    console.log(opponentData.UserOnRoom)\r\n    if(Number(opponentData.UserOnRoom[0].user[0].id) === Number(myData.id) || Number(opponentData.UserOnRoom[1].user[0].id) === Number(myData.id)) {\r\n      const roomId = opponentData.UserOnRoom[0].roomId\r\n      return (\r\n        <>\r\n        <Link to={`/message/${roomId}`}>\r\n          <div className=\"chatting-box\">\r\n            <li className=\"chatting-user\">{Number(opponentData.UserOnRoom[0].user[0].id) ===  Number(myData.id)? opponentData.UserOnRoom[1].user[0].nickName : opponentData.UserOnRoom[0].user[0].nickName}</li><br></br>\r\n            {/* <li className=\"chatting-text\">{roomId}</li> */}\r\n          </div>\r\n        </Link>\r\n        </>\r\n      );\r\n      }else{\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default MessageUserDetail","import React, { Component } from \"react\"\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport MessageUserDetail from \"./MessageUserDetail\";\r\n\r\n\r\nconst MESSAGES_VIEW_QUERY = gql`\r\n  query {\r\n    seeRooms {\r\n      UserOnRoom{\r\n        id\r\n        roomId\r\n        user{\r\n          id\r\n          nickName\r\n        }\r\n      }\r\n      message{\r\n        id\r\n        text\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass MessageUsers extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <ul className=\"chatting-title\">\r\n          <div className=\"chattitle\">대화 상대</div><br/>\r\n          <Query query={MESSAGES_VIEW_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading)\r\n              return (\r\n                <>\r\n                </>\r\n              );\r\n            if (error){\r\n              return (\r\n              <>\r\n              </>\r\n              );\r\n            }\r\n            return data.seeRooms.map((messageData, i) => {\r\n            console.log(messageData.UserOnRoom)\r\n\r\n              return (\r\n                <MessageUserDetail value={messageData} myData={this.props.myData} />\r\n              );\r\n            })\r\n          }}\r\n        </Query>\r\n        </ul>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default MessageUsers","import React, { Component } from \"react\";\r\n\r\nclass MessageText extends Component {\r\n  render() {\r\n    const myData = this.props.myData.me; // 로그인 된 내 정보\r\n    const message = this.props.message;\r\n    return message.messages.map((message, i) => {\r\n      const mtime = message.createdAt;\r\n      if(message.from === Number(myData.id)){\r\n        let a = mtime.substring(0,8);\r\n        let b = Number(mtime.substring(8,10));\r\n        let c = Number(mtime.substring(11,13))+9;\r\n        var d = mtime.substring(13,16);\r\n        if(c>=24){\r\n          if(c <= 33){\r\n            c = \"0\"+(c-24);\r\n          }else if(c === 24){\r\n            c= \"00\";\r\n          }else{\r\n            c = c-24\r\n          }\r\n          if(b<9){\r\n            b = \"0\"+(b+1);\r\n          }else if(b>=30){\r\n            b = \"00\"\r\n          }else{\r\n            b = b+1\r\n          }\r\n        }\r\n        const messageTime = a+b+\" \"+c+d\r\n        return (\r\n          <>\r\n            <div className=\"my-message\">\r\n              <span className=\"bigfont\">{message.text}</span><br></br>\r\n              <span className=\"smallfont\">{messageTime}</span>\r\n            </div>\r\n          </>\r\n        )\r\n      }else{\r\n        let a = mtime.substring(0,8);\r\n        let b = Number(mtime.substring(8,10));\r\n        let c = Number(mtime.substring(11,13))+9;\r\n        let d = mtime.substring(13,16);\r\n        if(c>=24){\r\n          if(c <= 33){\r\n            c = \"0\"+(c-24);\r\n          }else if(c === 24){\r\n            c= \"00\";\r\n          }else{\r\n            c = c-24\r\n          }\r\n          if(b<9){\r\n            b = \"0\"+(b+1);\r\n          }else if(b>=30){\r\n            b = \"00\"\r\n          }else{\r\n            b = b+1\r\n          }\r\n        }\r\n        const messageTime = a+b+\" \"+c+d\r\n        return (\r\n          <>\r\n            <div key={i} className=\"your-message\">\r\n              <span className=\"bigfont\">{message.text}</span><br></br>\r\n              <span className=\"smallfont\">{messageTime}</span>\r\n            </div>\r\n          </>\r\n        )\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default MessageText;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport MessageText from \"./MessageText\";\r\n\r\nconst MESSAGE_VIEW_QUERY = gql`\r\n  query messages($room: Int!) {\r\n    messages(room: $room) {\r\n      id\r\n      text\r\n      to\r\n      from\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst ROOM_DATA_QUERY = gql`\r\n  query seeRoom($room: Int!) {\r\n    seeRoom(roomId: $room) {\r\n      id\r\n      UserOnRoom {\r\n        roomId\r\n        user {\r\n          id\r\n          nickName\r\n        }\r\n        service {\r\n          title\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst SEND_MESSAGE_MUTATION = gql`\r\n  mutation SendMessageMutation($room: Int, $message: String!, $to: Int!) {\r\n    sendMessage(room: $room, message: $message, to: $to) {\r\n      text\r\n    }\r\n  }\r\n`;\r\n\r\nconst newMessage = gql`\r\n  subscription newMessage($roomId: Int!) {\r\n    newMessage(roomId: $roomId) {\r\n      id\r\n      text\r\n      to\r\n      from\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nlet unsubscribe = null;\r\n\r\nclass Message extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: \"\",\r\n      to: \"\",\r\n    };\r\n  }\r\n\r\n  settingTo(data, myId) {\r\n    if (this.state.to === \"\") {\r\n      if (data[0].user[0].id === myId) {\r\n        this.setState({\r\n          to: Number(data[1].user[0].id),\r\n        });\r\n      } else if (data[1].user[0].id === myId) {\r\n        this.setState({\r\n          to: Number(data[0].user[0].id),\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const myData = this.props.myData.me; // 로그인 된 내 정보\r\n    const myId = myData.id;\r\n    const { message } = this.state;\r\n    const room = Number(this.props.roomId);\r\n    return (\r\n      <>\r\n        <Query\r\n          query={ROOM_DATA_QUERY}\r\n          variables={{\r\n            room: room,\r\n          }}\r\n        >\r\n          {({ loading, error, data }) => {\r\n            if (loading) {\r\n              return <div>Loading...</div>;\r\n            }\r\n            if (error) return <></>;\r\n            const roomData = data;\r\n            return (\r\n              <>\r\n                <Query\r\n                  query={MESSAGE_VIEW_QUERY}\r\n                  variables={{\r\n                    room: room,\r\n                  }}\r\n                >\r\n                  {({ loading, error, data, subscribeToMore, refetch }) => {\r\n                    if (loading) return <></>;\r\n                    if (error) {\r\n                      return <></>;\r\n                    }\r\n                    if (!unsubscribe) {\r\n                      unsubscribe = subscribeToMore({\r\n                        document: newMessage,\r\n                        variables: {\r\n                          roomId: room,\r\n                        },\r\n                        updateQuery: (prev, { subscriptionData }) => {\r\n                          if (!subscriptionData.data) {\r\n                            return prev;\r\n                          }\r\n                          const { newMessage } = subscriptionData.data;\r\n                          return {\r\n                            ...prev,\r\n                            messages: [...prev.messages, newMessage],\r\n                          };\r\n                        },\r\n                      });\r\n                      refetch();\r\n                    }\r\n                    refetch();\r\n                    this.settingTo(roomData.seeRoom.UserOnRoom, myId);\r\n                    const to = this.state.to;\r\n                    return (\r\n                      <div className=\"map4\">\r\n                        <div className=\"chat-title\">\r\n                          방제목 :{\" \"}\r\n                          {roomData.seeRoom.UserOnRoom[0].service.title}\r\n                        </div>\r\n                        <div className=\"chat-input-box\">\r\n                          <div className=\"map5\">\r\n                            <MessageText\r\n                              myData={this.props.myData}\r\n                              roomData={roomData}\r\n                              message={data}\r\n                            />\r\n                          </div>\r\n                          <Mutation\r\n                            mutation={SEND_MESSAGE_MUTATION}\r\n                            onCompleted={() => this._confirm()}\r\n                          >\r\n                            {(mutation) => (\r\n                              <form\r\n                                onSubmit={(e) => {\r\n                                  e.preventDefault();\r\n                                  mutation({\r\n                                    variables: { room, message, to },\r\n                                  });\r\n                                }}\r\n                              >\r\n                                <input\r\n                                  className=\"chat-input\"\r\n                                  value={message}\r\n                                  onChange={(e) =>\r\n                                    this.setState({ message: e.target.value })\r\n                                  }\r\n                                ></input>\r\n                                <button\r\n                                  type=\"submit\"\r\n                                  className=\"writesubmit2\"\r\n                                  readOnly\r\n                                >\r\n                                  제출\r\n                                </button>\r\n                              </form>\r\n                            )}\r\n                          </Mutation>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  }}\r\n                </Query>\r\n              </>\r\n            );\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n  _confirm = async (data) => {\r\n    this.setState({\r\n      message: \"\",\r\n    });\r\n  };\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\nimport MessageUsers from \"./MessageUsers\";\r\nimport Message from \"./Message\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport ErrorNotLogin from \"../basics/ErrorNotLogin\";\r\n\r\nconst USER_DATA_QUERY = gql`\r\n  query {\r\n    me {\r\n      id\r\n      email\r\n      userName\r\n    }\r\n  }\r\n`;\r\n\r\nclass MessageMain extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Query query={USER_DATA_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) {\r\n              return <div>Loading...</div>\r\n            }\r\n            if (error) return (\r\n              <ErrorNotLogin />\r\n            )\r\n            if (data) {\r\n              const myData = data;\r\n              return (\r\n                <>\r\n                <div className=\"UserInformation\">\r\n                  <div className=\"UserInformation-article1\">\r\n                    <MessageUsers myData={myData} roomId={this.props.match.params.id} />\r\n                  </div>\r\n                  <div className=\"UserInformation-article2\">\r\n                    <Message myData={myData} roomId={this.props.match.params.id} />\r\n                  </div>\r\n                </div>\r\n                </>\r\n              );\r\n            }\r\n          }}\r\n        </Query>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageMain;","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport Aside from \"../basics/Aside\";\r\nimport Footer from \"../basics/Footer\";\r\nimport MessageMain from \"./MessageMain\"\r\n\r\n\r\nclass IndexMessage extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Aside />\r\n        <Route component={MessageMain} />\r\n        <Footer />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default IndexMessage","import React, { Component } from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport Main from \"./routes/Main\"\r\nimport Board from \"./routes/Board\"\r\nimport Login from \"./routes/Login\"\r\nimport SignUp from \"./routes/SignUp\"\r\nimport Write from \"./routes/Write\"\r\nimport Header from \"./components/basics/Header\"\r\nimport ValidateEmail from \"./components/mains/ValidateEmail\"\r\nimport BoardDetail from \"./components/board/BoardDetail\"\r\nimport BoardUpdate from \"./components/board/BoardUpdate\"\r\nimport IndexUsers from \"./components/Users/IndexUsers\"\r\nimport ReviewWrite from \"./components/reviews/ReviewWrite\"\r\nimport IndexMessage from \"./components/messages/IndexMessage\"\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <Route path=\"/\" exact={true} component={Main} />\r\n        <Route path=\"/login\" exact={true} component={Login} />\r\n        <Route path=\"/signup\" exact={true} component={SignUp} />\r\n        <Route path=\"/board\" exact={true} component={Board} />\r\n        <Route path=\"/board/:id\" exact={true} component={BoardDetail} />\r\n        <Route path=\"/board/update/:id\" exact={true} component={BoardUpdate} />\r\n        <Route path=\"/write\" exact={true} component={Write} />\r\n        <Route path=\"/validateEmail\" exact={true} component={ValidateEmail} />\r\n        <Route path=\"/userInfor\" component={IndexUsers} />\r\n        <Route path=\"/reviewWrite\" exact={true} component={ReviewWrite} />\r\n        <Route path=\"/message\" exact={true} component={IndexMessage} />\r\n        <Route path=\"/message/:id\" exact={true} component={IndexMessage} />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { setContext } from \"apollo-link-context\";\r\nimport { AUTH_TOKEN } from \"./constants\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { split } from \"apollo-link\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport { onError } from \"apollo-link-error\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"http://3.34.199.225:4000\",\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem(AUTH_TOKEN);\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst errorLink = onError(({ graphQLErrors }) => {\r\n  if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\r\n});\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: `ws://3.34.199.225:4000`,\r\n  options: {\r\n    reconnect: true,\r\n    connectionParams: {\r\n      authToken: localStorage.getItem(AUTH_TOKEN),\r\n    },\r\n  },\r\n});\r\n\r\nconst link = split(\r\n  ({ query }) => {\r\n    const { kind, operation } = getMainDefinition(query);\r\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\r\n  },\r\n  wsLink,\r\n  authLink.concat(httpLink),\r\n  errorLink\r\n);\r\n\r\nconst client = new ApolloClient({\r\n  link,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}